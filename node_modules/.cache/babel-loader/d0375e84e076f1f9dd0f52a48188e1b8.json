{"ast":null,"code":"var _jsxFileName = \"/home/hajar/Desktop/Projects/Route-19/src/components/SearchBar/InputOrigin.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport OptionsBox from './OptionsBox.js';\nimport styled from 'styled-components';\nimport theme from './theme.css';\nimport UserCoor from '../../contexts/UserCoor.js';\nimport SubContext from '../../contexts/SubContext.js';\nconst AutosuggestContainer = styled.div`\n      width: 40%;\n      height: 40px;\n      color: #000;\n      background-color: #fff;\n      border: 1px solid #0065FF;\n      background-color: #ffffff;\n      box-sizing: border-box;\n      border-radius: 1px;\n      margin: auto;\n      margin-bottom: 30px;\n      @media screen and (max-width: 768px){\n        width: 100%; \n      }\n`;\nlet Addresses = {};\nfetch('./MadridStreets.json').then(res => res.json()).then(data => {\n  Addresses = data;\n  console.log(Addresses);\n}); // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase().split(\",\");\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : Addresses.filter(item => {\n    if (inputValue.length === 1) {\n      const regex = new RegExp(inputValue[0], 'gi');\n      return item.address.match(regex);\n    } else {\n      const regex0 = new RegExp(inputValue[0], 'gi');\n      const regex1 = new RegExp(inputValue[1].substr(1, inputValue[1].length), 'gi');\n      return item.address.match(regex0);\n    }\n  });\n};\n\nconst getSuggestionValue = suggestion => {\n  let address = suggestion.address;\n  let city = suggestion.city;\n  let comma = \", \";\n  return address + comma + city;\n};\n\nconst renderSuggestion = suggestion => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SearchOptions\",\n    value: suggestion.coordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }\n  }, suggestion.address, \", \", suggestion.city);\n};\n\nconst renderInputComponent = inputProps => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"inputContainer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  className: \"icon\",\n  src: \"./images/OriginIcon.svg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }\n})));\n\nclass InputOrigin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      OriginCoordinate: []\n    };\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.context);\n  }\n\n  onSuggestionSelected(event, {\n    suggestion,\n    suggestionValue,\n    suggestionIndex,\n    sectionIndex,\n    method\n  }) {\n    console.log(\"origin funcion que manda el context\");\n    this.context.getOriginCoor(suggestion.coordinates);\n    console.log(this.context);\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Introduce una direcciÃ³n',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(AutosuggestContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SubContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, context => /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSuggestionSelected,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      renderInputComponent: renderInputComponent,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nInputOrigin.contextType = SubContext.Consumer;\nexport default InputOrigin;","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/components/SearchBar/InputOrigin.js"],"names":["React","Component","Autosuggest","OptionsBox","styled","theme","UserCoor","SubContext","AutosuggestContainer","div","Addresses","fetch","then","res","json","data","console","log","getSuggestions","value","inputValue","trim","toLowerCase","split","inputLength","length","filter","item","regex","RegExp","address","match","regex0","regex1","substr","getSuggestionValue","suggestion","city","comma","renderSuggestion","coordinates","renderInputComponent","inputProps","InputOrigin","constructor","props","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","OriginCoordinate","onSuggestionSelected","bind","componentDidMount","context","suggestionValue","suggestionIndex","sectionIndex","method","getOriginCoor","render","placeholder","contextType","Consumer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Autosuggest from 'react-autosuggest';\nimport OptionsBox from './OptionsBox.js'\nimport styled from 'styled-components'\nimport theme from './theme.css'\nimport UserCoor from '../../contexts/UserCoor.js'\nimport SubContext from '../../contexts/SubContext.js'\n\nconst AutosuggestContainer = styled.div`\n      width: 40%;\n      height: 40px;\n      color: #000;\n      background-color: #fff;\n      border: 1px solid #0065FF;\n      background-color: #ffffff;\n      box-sizing: border-box;\n      border-radius: 1px;\n      margin: auto;\n      margin-bottom: 30px;\n      @media screen and (max-width: 768px){\n        width: 100%; \n      }\n`\nlet Addresses = {}\n\nfetch('./MadridStreets.json')\n    .then( res => res.json())\n    .then (data =>{ \n        Addresses = data\n        console.log(Addresses)\n        })\n \n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase().split(\",\");\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : Addresses.filter(item =>{\n    if (inputValue.length === 1) {\n        const regex = new RegExp(inputValue[0], 'gi');\n        return (item.address.match(regex));\n      } else {\n        const regex0 = new RegExp(inputValue[0], 'gi');\n        const regex1 = new RegExp(inputValue[1].substr(1, inputValue[1].length), 'gi');\n        return (item.address.match(regex0));\n      }\n  }\n  );\n};\n\nconst getSuggestionValue = (suggestion) => {\n  let address = suggestion.address\n  let city = suggestion.city\n  let comma = \", \"\n  return address + comma + city\n  };\n \nconst renderSuggestion = suggestion => {\n    return <div className=\"SearchOptions\" value={suggestion.coordinates}>{suggestion.address}, {suggestion.city}</div>\n\n}\n\nconst renderInputComponent = inputProps => (\n    <div className=\"inputContainer\">\n      <img className=\"icon\" src=\"./images/OriginIcon.svg\" />\n      <input {...inputProps} />\n    </div>\n  );\n \nclass InputOrigin extends Component {\n  static contextType = SubContext.Consumer\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: [],\n      OriginCoordinate: []\n    };\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this)\n  }\n \ncomponentDidMount(){\n  console.log(this.context)\n}\n\n  onChange = (event, { newValue, }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n \n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected(event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method },){\n    console.log(\"origin funcion que manda el context\")\n    this.context.getOriginCoor(suggestion.coordinates)\n    console.log(this.context)\n  }\n \n  render() {\n    const { value, suggestions } = this.state;\n \n    const inputProps = {\n      placeholder: 'Introduce una direcciÃ³n',\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n        <AutosuggestContainer>\n        <SubContext.Consumer>\n          {(context) =>  \n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                onSuggestionSelected={this.onSuggestionSelected}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                renderInputComponent={renderInputComponent}\n                inputProps={inputProps}\n            />\n          }\n            </SubContext.Consumer>\n        </AutosuggestContainer>\n    );\n  }\n}\n\nexport default InputOrigin\n\n"]},"metadata":{},"sourceType":"module"}