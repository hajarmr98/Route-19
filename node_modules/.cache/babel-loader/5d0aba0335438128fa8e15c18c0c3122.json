{"ast":null,"code":"var _jsxFileName = \"/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapB1.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css';\nimport SubContext from '../../contexts/SubContext.js';\nimport Loading from '../Loading/Loading';\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -3.711830,\n      lat: 40.438985,\n      zoom: 14,\n      maxZoom: 16,\n      minZoom: 1,\n      UserCoor: this.props.UserCoor,\n      mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      Message1: 'Capa rosa encendida',\n      Message2: 'Capa celeste encendida',\n      Origin: this.props.Origin,\n      Destiny: this.props.Destiny,\n      Loader: false\n    };\n    this.serLayerRed = this.setLayerRed.bind(this);\n    this.setLayerGreen = this.setLayerGreen.bind(this);\n    this.renderLayer1 = this.renderLayer1.bind(this);\n    this.renderLayer2 = this.renderLayer2.bind(this);\n  } /// ---- Map Inicialization ---- ///\n\n\n  componentDidMount() {\n    function loadLoading() {\n      if (!this.state.Loader) {\n        return /*#__PURE__*/React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 20\n          }\n        });\n      }\n    }\n\n    loadLoading();\n    console.log(\"MAPA B1 DID MOUNT\");\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      minZoom: 1\n    });\n    let originCoordinates = this.state.Origin;\n    let destinyCoordinates = this.state.Destiny;\n    let userOriginLon = this.state.Origin[0];\n    let userOriginLat = this.state.Origin[1];\n    let userDestinyLon = this.state.Destiny[0];\n    let userDestinyLat = this.state.Destiny[1];\n    map.on('load', function () {\n      // --- MARKER ORIGEN NUEVO --- //\n      let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n      let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map); // --- CALCULATED ROUTE --- //\n\n      let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n      console.log(\"routePetition\", routePetition);\n      let newRoute = {};\n      fetch(routePetition).then(res => res.json()).then(data => {\n        newRoute = data;\n        console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n        console.log(\"routepetition\", routePetition);\n        console.log(\"respuesta de la api de rutas\", newRoute);\n        console.log(\"LAS RUTAS EN EL FETCH DEL DID MOUNT\");\n        paintRoute(newRoute);\n      }).catch(err => console.log(err));\n\n      function paintRoute(newRoute) {\n        console.log(\"RUTAS PINTADAS\");\n        map.addSource('route', {\n          'type': 'geojson',\n          'data': newRoute\n        });\n        map.addLayer({\n          'id': 'route',\n          'type': 'line',\n          'source': 'route',\n          'layout': {\n            'line-join': 'round',\n            'line-cap': 'round'\n          },\n          'paint': {\n            'line-color': '#0065ff',\n            'line-width': 6,\n            'line-dasharray': [0, 2]\n          }\n        });\n      }\n\n      let RedPlaces = {};\n      fetch('https://route19api.herokuapp.com/routes/danger').then(res => res.json()).then(data => {\n        RedPlaces = data;\n        console.log(\"redplaces\", RedPlaces);\n        paintMapRed(RedPlaces);\n      });\n\n      function paintMapRed(RedPlaces) {\n        map.addSource('redzones', {\n          type: 'geojson',\n          data: RedPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#FF5630',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#F4856C', 5, '#FF5630', 20, '#FF5630'],\n            'circle-radius': ['step', ['get', 'point_count'], 2, 3, 4, 10, 8]\n          }\n        });\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['!', ['has', 'point_count']],\n          circleMinZoom: 16,\n          paint: {\n            'circle-color': '#FF5630',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 5,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#FF5630'\n          }\n        });\n      }\n\n      let GreenPlaces = {};\n      fetch('https://route19api.herokuapp.com/routes/safe').then(res => res.json()).then(data => {\n        GreenPlaces = data;\n        console.log(\"greenplaces\", GreenPlaces);\n        paintMapGreen(GreenPlaces);\n      });\n\n      function paintMapGreen(GreenPlaces) {\n        map.addSource('greenzones', {\n          type: 'geojson',\n          data: GreenPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'greenclusters',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#00B8D9',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n            'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n          }\n        });\n        map.addLayer({\n          id: 'green-unclustered-point',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#00B8D9',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 7,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#00B8D9'\n          }\n        });\n      }\n\n      ;\n    });\n  } /// ---- Map Update ---- ///\n\n\n  componentDidUpdate() {\n    console.log(\"MAP B1 DID UPDATE\");\n\n    if (this.props.layers.RedLayer === true && this.props.layers.GreenLayer === true) {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom,\n        // maxZoom: 16,\n        minZoom: this.state.minZoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      let originCoordinates = this.state.Origin;\n      let destinyCoordinates = this.state.Destiny;\n      let userOriginLon = this.state.Origin[0];\n      let userOriginLat = this.state.Origin[1];\n      let userDestinyLon = this.state.Destiny[0];\n      let userDestinyLat = this.state.Destiny[1];\n      map.on('load', function () {\n        console.log('las coor que le llegan a mapa b del usuario son:', userCoordinates); // --- MARKER ORIGEN NUEVO --- //\n\n        let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n        let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map); // --- ROUTE --- //\n\n        let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n        let newRoute = {};\n        fetch(routePetition).then(res => res.json()).then(data => {\n          newRoute = data;\n          console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n          console.log(\"routepetition\", routePetition);\n          console.log(\"respuesta de la api de rutas\", newRoute);\n          console.log(\"MAP B1 RUTA EN DID UPDATE\");\n          paintRoute(newRoute);\n        });\n\n        function paintRoute(newRoute) {\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': newRoute\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#0065ff',\n              'line-width': 6,\n              'line-dasharray': [0, 2]\n            }\n          });\n        } //  --- RED LAYER --- //\n\n\n        let RedPlaces = {};\n        fetch('https://route19api.herokuapp.com/routes/danger').then(res => res.json()).then(data => {\n          RedPlaces = data;\n          console.log(RedPlaces);\n          paintMapRed(RedPlaces);\n        });\n\n        function paintMapRed(RedPlaces) {\n          map.addSource('redzones', {\n            type: 'geojson',\n            data: RedPlaces,\n            cluster: true,\n            clusterMaxZoom: 16,\n            // Max zoom to cluster points on\n            clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              // 'point_count': 10,\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#FF5630',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#F4856C', 5, '#FF5630', 20, '#FF5630'],\n              'circle-radius': ['step', ['get', 'point_count'], 2, 3, 4, 10, 8]\n            }\n          });\n          map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['!', ['has', 'point_count']],\n            circleMinZoom: 16,\n            paint: {\n              'circle-color': '#FF5630',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 5,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#FF5630'\n            }\n          });\n        } //  --- GREEN LAYER --- //\n\n\n        let GreenPlaces = {};\n        fetch('https://route19api.herokuapp.com/routes/safe').then(res => res.json()).then(data => {\n          GreenPlaces = data;\n          console.log(GreenPlaces);\n          paintMapGreen(GreenPlaces);\n        });\n\n        function paintMapGreen(GreenPlaces) {\n          map.addSource('greenzones', {\n            type: 'geojson',\n            data: GreenPlaces,\n            cluster: true,\n            clusterMaxZoom: 16,\n            // Max zoom to cluster points on\n            clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'greenclusters',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#00B8D9',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n              'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n            }\n          });\n          map.addLayer({\n            id: 'green-unclustered-point',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n              'circle-color': '#00B8D9',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 7,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#00B8D9'\n            }\n          });\n        }\n      });\n    } else if (this.props.layers.RedLayer === true && this.props.layers.GreenLayer === false) {\n      this.setLayerRed();\n      console.log(\"MAPA B DID UPDATE ELSE IF 1\", this.props.layers.GreenLayer);\n    } else if (this.props.layers.RedLayer === false && this.props.layers.GreenLayer === true) {\n      this.setLayerGreen();\n      console.log(\"MAPA B DID UPDATE ELSE IF 2\", this.props.layers.RedLayer);\n    } else {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom,\n        maxZoom: this.state.maxZoom,\n        minZoom: this.state.minZoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      let originCoordinates = this.state.Origin;\n      let destinyCoordinates = this.state.Destiny;\n      let userOriginLon = this.state.Origin[0];\n      let userOriginLat = this.state.Origin[1];\n      let userDestinyLon = this.state.Destiny[0];\n      let userDestinyLat = this.state.Destiny[1];\n      map.on('load', function () {\n        // --- MARKER ORIGEN NUEVO --- //\n        let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n        let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map);\n        let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n        let newRoute = {};\n        fetch(routePetition).then(res => res.json()).then(data => {\n          newRoute = data;\n          console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n          console.log(\"routepetition\", routePetition);\n          console.log(\"respuesta de la api de rutas\", newRoute);\n          paintRoute(newRoute);\n        });\n\n        function paintRoute(newRoute) {\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': newRoute\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#0065ff',\n              'line-width': 6,\n              'line-dasharray': [0, 2]\n            }\n          });\n        }\n      });\n    }\n  } /// ---- Layers Selections ---- ///\n\n\n  setLayerRed() {\n    console.log(\"esto es setLayer1\", this.props.layers.RedLayer);\n\n    if (this.props.layers.RedLayer === true) {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      let originCoordinates = this.state.Origin;\n      let destinyCoordinates = this.state.Destiny;\n      let userOriginLon = this.state.Origin[0];\n      let userOriginLat = this.state.Origin[1];\n      let userDestinyLon = this.state.Destiny[0];\n      let userDestinyLat = this.state.Destiny[1];\n      map.on('load', function () {\n        // --- MARKER ORIGEN NUEVO --- //\n        let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n        let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map);\n        let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n        let newRoute = {};\n        fetch(routePetition).then(res => res.json()).then(data => {\n          newRoute = data;\n          console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n          console.log(\"routepetition\", routePetition);\n          console.log(\"respuesta de la api de rutas\", newRoute);\n          paintRoute(newRoute);\n        });\n\n        function paintRoute(newRoute) {\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': newRoute\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#0065ff',\n              'line-width': 6,\n              'line-dasharray': [0, 2]\n            }\n          });\n        } //  --- RED LAYER --- //\n\n\n        let RedPlaces = {};\n        fetch('https://route19api.herokuapp.com/routes/danger').then(res => res.json()).then(data => {\n          RedPlaces = data;\n          console.log(RedPlaces);\n          paintMapRed(RedPlaces);\n        });\n\n        function paintMapRed(RedPlaces) {\n          map.addSource('redzones', {\n            type: 'geojson',\n            data: RedPlaces,\n            cluster: true,\n            clusterMaxZoom: 16,\n            // Max zoom to cluster points on\n            clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#FF5630',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#FF5630', 2, '#FF5630', 4, '#FF5630'],\n              'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 20, 9]\n            }\n          });\n          map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n              'circle-color': '#FF5630',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 7,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#FF5630'\n            }\n          });\n        }\n      });\n    }\n  }\n\n  setLayerGreen() {\n    console.log(\"esto es setLayer\", this.props.layers.GreenLayer);\n\n    if (this.props.layers.GreenLayer === true) {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      let originCoordinates = this.state.Origin;\n      let destinyCoordinates = this.state.Destiny;\n      let userOriginLon = this.state.Origin[0];\n      let userOriginLat = this.state.Origin[1];\n      let userDestinyLon = this.state.Destiny[0];\n      let userDestinyLat = this.state.Destiny[1];\n      map.on('load', function () {\n        // --- MARKER ORIGEN NUEVO --- //\n        let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n        let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map);\n        let routePetition = `https://route19api.herokuapp.com/routes/example/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n        let newRoute = {};\n        fetch(routePetition).then(res => res.json()).then(data => {\n          newRoute = data;\n          console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n          console.log(\"routepetition\", routePetition);\n          console.log(\"respuesta de la api de rutas\", newRoute);\n          paintRoute(newRoute);\n        });\n\n        function paintRoute(newRoute) {\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': newRoute\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#0065ff',\n              'line-width': 6,\n              'line-dasharray': [0, 2]\n            }\n          });\n        } //  --- GREEEN LAYER --- //\n\n\n        let GreenPlaces = {};\n        fetch('https://route19api.herokuapp.com/routes/safe').then(res => res.json()).then(data => {\n          GreenPlaces = data;\n          console.log(GreenPlaces);\n          paintMapGreen(GreenPlaces);\n        });\n\n        function paintMapGreen(GreenPlaces) {\n          map.addSource('greenzones', {\n            type: 'geojson',\n            data: GreenPlaces,\n            cluster: true,\n            clusterMaxZoom: 30,\n            // Max zoom to cluster points on\n            clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'greenclusters',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#00B8D9',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n              'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n            }\n          });\n          map.addLayer({\n            id: 'green-unclustered-point',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n              'circle-color': '#00B8D9',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 7,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#00B8D9'\n            }\n          });\n        }\n      });\n    } else {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      let originCoordinates = this.state.Origin;\n      let destinyCoordinates = this.state.Destiny;\n      let userOriginLon = this.state.Origin[0];\n      let userOriginLat = this.state.Origin[1];\n      let userDestinyLon = this.state.Destiny[0];\n      let userDestinyLat = this.state.Destiny[1];\n      map.on('load', function () {\n        // --- MARKER ORIGEN NUEVO --- //\n        let markerO = new mapboxgl.Marker().setLngLat(originCoordinates).addTo(map); // --- MARKER DESTINO NUEVO --- //\n\n        let markerD = new mapboxgl.Marker().setLngLat(destinyCoordinates).addTo(map);\n        let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`;\n        let newRoute = {};\n        fetch(routePetition).then(res => res.json()).then(data => {\n          newRoute = data;\n          console.log(\"origen:\", userOriginLon, \",\", userOriginLat);\n          console.log(\"routepetition\", routePetition);\n          console.log(\"respuesta de la api de rutas\", newRoute);\n          paintRoute(newRoute);\n        });\n\n        function paintRoute(newRoute) {\n          map.addSource('route', {\n            'type': 'geojson',\n            'data': newRoute\n          });\n          map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': '#0065ff',\n              'line-width': 6,\n              'line-dasharray': [0, 2]\n            }\n          });\n        }\n      });\n    }\n  }\n\n  renderLayer1() {\n    let layer = `${this.state.Message1}`;\n    return layer;\n  }\n\n  renderLayer2() {\n    let layer = `${this.state.Message2}`;\n    return layer;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nMap.contextType = SubContext.Consumer;\nexport default Map;","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapB1.js"],"names":["React","Component","mapboxgl","SubContext","Loading","accessToken","Map","constructor","props","state","lng","lat","zoom","maxZoom","minZoom","UserCoor","mapStyle","Message1","Message2","Origin","Destiny","Loader","serLayerRed","setLayerRed","bind","setLayerGreen","renderLayer1","renderLayer2","componentDidMount","loadLoading","console","log","map","container","mapContainer","style","center","originCoordinates","destinyCoordinates","userOriginLon","userOriginLat","userDestinyLon","userDestinyLat","on","markerO","Marker","setLngLat","addTo","markerD","routePetition","newRoute","fetch","then","res","json","data","paintRoute","catch","err","addSource","addLayer","RedPlaces","paintMapRed","type","cluster","clusterMaxZoom","clusterRadius","id","source","filter","paint","circleMinZoom","GreenPlaces","paintMapGreen","componentDidUpdate","layers","RedLayer","GreenLayer","userCoordinates","layer","render","el","contextType","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACAF,QAAQ,CAACG,WAAT,GAAuB,uFAAvB;;AAGA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAExBM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACbC,MAAAA,GAAG,EAAE,CAAC,QADO;AAEbC,MAAAA,GAAG,EAAE,SAFQ;AAGbC,MAAAA,IAAI,EAAE,EAHO;AAIbC,MAAAA,OAAO,EAAE,EAJI;AAKbC,MAAAA,OAAO,EAAE,CALI;AAMbC,MAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWO,QANR;AAObC,MAAAA,QAAQ,EAAE,gDAPG;AAQbC,MAAAA,QAAQ,EAAG,qBARE;AASbC,MAAAA,QAAQ,EAAG,wBATE;AAUbC,MAAAA,MAAM,EAAE,KAAKX,KAAL,CAAWW,MAVN;AAWbC,MAAAA,OAAO,EAAG,KAAKZ,KAAL,CAAWY,OAXR;AAYbC,MAAAA,MAAM,EAAE;AAZK,KAAb;AAcA,SAAKC,WAAL,GAAmB,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACC,GAtBmB,CA2B5B;;;AAEAI,EAAAA,iBAAiB,GAAE;AACf,aAASC,WAAT,GAAsB;AAClB,UAAG,CAAC,KAAKpB,KAAL,CAAWY,MAAf,EAAsB;AAClB,4BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ;;AACDQ,IAAAA,WAAW;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMC,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,MAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,MAAAA,KAAK,EAAE,gDAFkB;AAGzBC,MAAAA,MAAM,EAAE,CAAC,KAAK3B,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHiB;AAIzBC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAJQ;AAKzBE,MAAAA,OAAO,EAAE;AALgB,KAAjB,CAAZ;AAOI,QAAIuB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,QAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,QAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,QAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,QAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,QAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACAY,IAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAE1B;AACA,UAAIC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAH0B,CAOzB;;AACA,UAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd,CARyB,CAYzB;;AACA,UAAIiB,aAAa,GAAI,kDAAiDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAAtJ;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AAED,UAAIC,QAAQ,GAAE,EAAd;AACAC,MAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,QAAAA,QAAQ,GAAGK,IAAX;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAyB,QAAAA,UAAU,CAACN,QAAD,CAAV;AAAqB,OAR7B,EASKO,KATL,CASYC,GAAG,IAAI5B,OAAO,CAACC,GAAR,CAAY2B,GAAZ,CATnB;;AAWA,eAASF,UAAT,CAAoBN,QAApB,EAA6B;AACzBpB,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAC,QAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,kBAAQ,SADW;AAEnB,kBAAQT;AAFW,SAAvB;AAIAlB,QAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,gBAAM,OADO;AAEb,kBAAQ,MAFK;AAGb,oBAAU,OAHG;AAIb,oBAAU;AACV,yBAAa,OADH;AAEV,wBAAY;AAFF,WAJG;AAQb,mBAAS;AACT,0BAAc,SADL;AAET,0BAAc,CAFL;AAGT,8BAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,SAAb;AAcH;;AACD,UAAIC,SAAS,GAAG,EAAhB;AACAV,MAAAA,KAAK,CAAC,gDAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZM,QAAAA,SAAS,GAAGN,IAAZ;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB8B,SAAxB;AACAC,QAAAA,WAAW,CAACD,SAAD,CAAX;AACH,OAND;;AAQA,eAASC,WAAT,CAAqBD,SAArB,EAA+B;AAC/B7B,QAAAA,GAAG,CAAC2B,SAAJ,CAAc,UAAd,EAA0B;AAAEI,UAAAA,IAAI,EAAE,SAAR;AAAmBR,UAAAA,IAAI,EAAEM,SAAzB;AAAoCG,UAAAA,OAAO,EAAE,IAA7C;AAAmDC,UAAAA,cAAc,EAAE,EAAnE;AAAuE;AACjGC,UAAAA,aAAa,EAAE,EADW,CACP;;AADO,SAA1B;AAIAlC,QAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,UAAAA,EAAE,EAAE,UAAN;AAAkBJ,UAAAA,IAAI,EAAE,QAAxB;AAAkCK,UAAAA,MAAM,EAAE,UAA1C;AAAsDC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAA9D;AACbC,UAAAA,KAAK,EAAE;AACP,8BAAkB,GADX;AAEP,mCAAuB,SAFhB;AAGP,mCAAuB,EAHhB;AAIP,qCAAyB,GAJlB;AAKP,4BAAgB,CAChB,MADgB,EAEhB,CAAC,KAAD,EAAQ,aAAR,CAFgB,EAGhB,SAHgB,EAIhB,CAJgB,EAKhB,SALgB,EAMhB,EANgB,EAOhB,SAPgB,CALT;AAcP,6BAAiB,CACjB,MADiB,EAEjB,CAAC,KAAD,EAAQ,aAAR,CAFiB,EAGjB,CAHiB,EAIjB,CAJiB,EAKjB,CALiB,EAMjB,EANiB,EAOjB,CAPiB;AAdV;AADM,SAAb;AA2BAtC,QAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,UAAAA,EAAE,EAAE,mBADS;AAEbJ,UAAAA,IAAI,EAAE,QAFO;AAGbK,UAAAA,MAAM,EAAE,UAHK;AAIbC,UAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbE,UAAAA,aAAa,EAAE,EALF;AAMbD,UAAAA,KAAK,EAAE;AACP,4BAAgB,SADT;AAEP;AACA,6BAAiB,CAHV;AAIP,mCAAuB,CAJhB;AAKP,mCAAuB;AALhB;AANM,SAAb;AAcC;;AACD,UAAIE,WAAW,GAAG,EAAlB;AACArB,MAAAA,KAAK,CAAC,8CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZiB,QAAAA,WAAW,GAAGjB,IAAd;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2ByC,WAA3B;AACAC,QAAAA,aAAa,CAACD,WAAD,CAAb;AACH,OAND;;AAQA,eAASC,aAAT,CAAuBD,WAAvB,EAAmC;AACnCxC,QAAAA,GAAG,CAAC2B,SAAJ,CAAc,YAAd,EAA4B;AAAEI,UAAAA,IAAI,EAAE,SAAR;AAAmBR,UAAAA,IAAI,EAAEiB,WAAzB;AAAsCR,UAAAA,OAAO,EAAE,IAA/C;AAAqDC,UAAAA,cAAc,EAAE,EAArE;AAAyE;AACrGC,UAAAA,aAAa,EAAE,EADa,CACV;;AADU,SAA5B;AAIAlC,QAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,UAAAA,EAAE,EAAE,eAAN;AAAuBJ,UAAAA,IAAI,EAAE,QAA7B;AAAuCK,UAAAA,MAAM,EAAE,YAA/C;AAA6DC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAArE;AACbC,UAAAA,KAAK,EAAE;AACP,8BAAkB,GADX;AAEP,mCAAuB,SAFhB;AAGP,mCAAuB,EAHhB;AAIP,qCAAyB,GAJlB;AAKP,4BAAgB,CAChB,MADgB,EAEhB,CAAC,KAAD,EAAQ,aAAR,CAFgB,EAGhB,SAHgB,EAIhB,CAJgB,EAKhB,SALgB,EAMhB,CANgB,EAOhB,SAPgB,CALT;AAcP,6BAAiB,CACjB,MADiB,EAEjB,CAAC,KAAD,EAAQ,aAAR,CAFiB,EAGjB,CAHiB,EAIjB,EAJiB,EAKjB,CALiB,EAMjB,EANiB,EAOjB,CAPiB;AAdV;AADM,SAAb;AA2BAtC,QAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,UAAAA,EAAE,EAAE,yBADS;AAEbJ,UAAAA,IAAI,EAAE,QAFO;AAGbK,UAAAA,MAAM,EAAE,YAHK;AAIbC,UAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbC,UAAAA,KAAK,EAAE;AACP,4BAAgB,SADT;AAEP;AACA,6BAAiB,CAHV;AAIP,mCAAuB,CAJhB;AAKP,mCAAuB;AALhB;AALM,SAAb;AAaC;;AAAA;AACJ,KAhKG;AAiKP,GApN2B,CAuN5B;;;AACII,EAAAA,kBAAkB,GAAG;AACjB5C,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,QAAI,KAAKvB,KAAL,CAAWmE,MAAX,CAAkBC,QAAlB,KAA+B,IAA/B,IAAuC,KAAKpE,KAAL,CAAWmE,MAAX,CAAkBE,UAAlB,KAAiC,IAA5E,EAAiF;AAC7E,YAAM7C,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,QAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,QAAAA,KAAK,EAAE,gDAFkB;AAGzBC,QAAAA,MAAM,EAAE,CAAC,KAAK3B,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHiB;AAIzBC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAJQ;AAKzB;AACAE,QAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK;AANK,OAAjB,CAAZ;AASI,UAAIgE,eAAe,GAAG,KAAKrE,KAAL,CAAWM,QAAjC;AACA,UAAIsB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,UAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,UAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,UAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AAEAY,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAC1Bb,QAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgE+C,eAAhE,EAD0B,CAI1B;;AACA,YAAIlC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAL0B,CASzB;;AACD,YAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd,CAV0B,CAezB;;AACD,YAAIiB,aAAa,GAAI,kDAAiDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAAtJ;AAEA,YAAIQ,QAAQ,GAAE,EAAd;AAEAC,QAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,UAAAA,QAAQ,GAAGK,IAAX;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAyB,UAAAA,UAAU,CAACN,QAAD,CAAV;AAEH,SAVL;;AAYA,iBAASM,UAAT,CAAoBN,QAApB,EAA6B;AACzBlB,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,oBAAQ,SADW;AAEnB,oBAAQT;AAFW,WAAvB;AAIAlB,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,MAFK;AAGb,sBAAU,OAHG;AAIb,sBAAU;AACV,2BAAa,OADH;AAEV,0BAAY;AAFF,aAJG;AAQb,qBAAS;AACT,4BAAc,SADL;AAET,4BAAc,CAFL;AAGT,gCAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,WAAb;AAcH,SAnDyB,CAqD1B;;;AACA,YAAIC,SAAS,GAAG,EAAhB;AACAV,QAAAA,KAAK,CAAC,gDAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZM,UAAAA,SAAS,GAAGN,IAAZ;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY8B,SAAZ;AACAC,UAAAA,WAAW,CAACD,SAAD,CAAX;AACH,SAND;;AAQA,iBAASC,WAAT,CAAqBD,SAArB,EAA+B;AAC/B7B,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,UAAd,EAA0B;AAAEI,YAAAA,IAAI,EAAE,SAAR;AAAmBR,YAAAA,IAAI,EAAEM,SAAzB;AAAoCG,YAAAA,OAAO,EAAE,IAA7C;AAAmDC,YAAAA,cAAc,EAAE,EAAnE;AAAuE;AACjGC,YAAAA,aAAa,EAAE,EADW,CACP;;AADO,WAA1B;AAIAlC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,YAAAA,EAAE,EAAE,UAAN;AAAkBJ,YAAAA,IAAI,EAAE,QAAxB;AAAkCK,YAAAA,MAAM,EAAE,UAA1C;AAAsDC,YAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAA9D;AACbC,YAAAA,KAAK,EAAE;AACP;AACA,gCAAkB,GAFX;AAGP,qCAAuB,SAHhB;AAIP,qCAAuB,EAJhB;AAKP,uCAAyB,GALlB;AAMP,8BAAgB,CAChB,MADgB,EAEhB,CAAC,KAAD,EAAQ,aAAR,CAFgB,EAGhB,SAHgB,EAIhB,CAJgB,EAKhB,SALgB,EAMhB,EANgB,EAOhB,SAPgB,CANT;AAeP,+BAAiB,CACjB,MADiB,EAEjB,CAAC,KAAD,EAAQ,aAAR,CAFiB,EAGjB,CAHiB,EAIjB,CAJiB,EAKjB,CALiB,EAMjB,EANiB,EAOjB,CAPiB;AAfV;AADM,WAAb;AA4BAtC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,YAAAA,EAAE,EAAE,mBADS;AAEbJ,YAAAA,IAAI,EAAE,QAFO;AAGbK,YAAAA,MAAM,EAAE,UAHK;AAIbC,YAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbE,YAAAA,aAAa,EAAE,EALF;AAMbD,YAAAA,KAAK,EAAE;AACP,8BAAgB,SADT;AAEP;AACA,+BAAiB,CAHV;AAIP,qCAAuB,CAJhB;AAKP,qCAAuB;AALhB;AANM,WAAb;AAcC,SA9GyB,CAgH1B;;;AACA,YAAIE,WAAW,GAAG,EAAlB;AACArB,QAAAA,KAAK,CAAC,8CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZiB,UAAAA,WAAW,GAAGjB,IAAd;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAYyC,WAAZ;AACAC,UAAAA,aAAa,CAACD,WAAD,CAAb;AACH,SAND;;AAQA,iBAASC,aAAT,CAAuBD,WAAvB,EAAmC;AAC/BxC,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,YAAd,EAA4B;AAAEI,YAAAA,IAAI,EAAE,SAAR;AAAmBR,YAAAA,IAAI,EAAEiB,WAAzB;AAAsCR,YAAAA,OAAO,EAAE,IAA/C;AAAqDC,YAAAA,cAAc,EAAE,EAArE;AAAyE;AACrGC,YAAAA,aAAa,EAAE,EADa,CACV;;AADU,WAA5B;AAIAlC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,YAAAA,EAAE,EAAE,eAAN;AAAuBJ,YAAAA,IAAI,EAAE,QAA7B;AAAuCK,YAAAA,MAAM,EAAE,YAA/C;AAA6DC,YAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAArE;AACbC,YAAAA,KAAK,EAAE;AACP,gCAAkB,GADX;AAEP,qCAAuB,SAFhB;AAGP,qCAAuB,EAHhB;AAIP,uCAAyB,GAJlB;AAKP,8BAAgB,CAChB,MADgB,EAEhB,CAAC,KAAD,EAAQ,aAAR,CAFgB,EAGhB,SAHgB,EAIhB,CAJgB,EAKhB,SALgB,EAMhB,CANgB,EAOhB,SAPgB,CALT;AAcP,+BAAiB,CACjB,MADiB,EAEjB,CAAC,KAAD,EAAQ,aAAR,CAFiB,EAGjB,CAHiB,EAIjB,EAJiB,EAKjB,CALiB,EAMjB,EANiB,EAOjB,CAPiB;AAdV;AADM,WAAb;AA2BAtC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,YAAAA,EAAE,EAAE,yBADS;AAEbJ,YAAAA,IAAI,EAAE,QAFO;AAGbK,YAAAA,MAAM,EAAE,YAHK;AAIbC,YAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbC,YAAAA,KAAK,EAAE;AACP,8BAAgB,SADT;AAEP;AACA,+BAAiB,CAHV;AAIP,qCAAuB,CAJhB;AAKP,qCAAuB;AALhB;AALM,WAAb;AAaH;AACJ,OAxKG;AAyKP,KA5LD,MA6LK,IAAG,KAAK9D,KAAL,CAAWmE,MAAX,CAAkBC,QAAlB,KAA+B,IAA/B,IAAuC,KAAKpE,KAAL,CAAWmE,MAAX,CAAkBE,UAAlB,KAAiC,KAA3E,EAAiF;AAC9E,WAAKtD,WAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,KAAKvB,KAAL,CAAWmE,MAAX,CAAkBE,UAA7D;AACP,KAHI,MAIA,IAAG,KAAKrE,KAAL,CAAWmE,MAAX,CAAkBC,QAAlB,KAA+B,KAA/B,IAAwC,KAAKpE,KAAL,CAAWmE,MAAX,CAAkBE,UAAlB,KAAiC,IAA5E,EAAiF;AAC9E,WAAKpD,aAAL;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,KAAKvB,KAAL,CAAWmE,MAAX,CAAkBC,QAA7D;AACP,KAHI,MAID;AACA,YAAM5C,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,QAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,QAAAA,KAAK,EAAE,gDAFkB;AAGzBC,QAAAA,MAAM,EAAE,CAAC,KAAK3B,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHiB;AAIzBC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAJQ;AAKzBC,QAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI,OALK;AAMzBC,QAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK;AANK,OAAjB,CAAZ;AASA,UAAIgE,eAAe,GAAG,KAAKrE,KAAL,CAAWM,QAAjC;AACA,UAAIsB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,UAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,UAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,UAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AAEAY,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAE1B;AACA,YAAIC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAH0B,CAO1B;;AACA,YAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd;AAIA,YAAIiB,aAAa,GAAI,kDAAiDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAAtJ;AAEA,YAAIQ,QAAQ,GAAE,EAAd;AAEAC,QAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,UAAAA,QAAQ,GAAGK,IAAX;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACAM,UAAAA,UAAU,CAACN,QAAD,CAAV;AAEH,SATL;;AAWA,iBAASM,UAAT,CAAoBN,QAApB,EAA6B;AACzBlB,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,oBAAQ,SADW;AAEnB,oBAAQT;AAFW,WAAvB;AAIAlB,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,MAFK;AAGb,sBAAU,OAHG;AAIb,sBAAU;AACV,2BAAa,OADH;AAEV,0BAAY;AAFF,aAJG;AAQb,qBAAS;AACT,4BAAc,SADL;AAET,4BAAc,CAFL;AAGT,gCAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,WAAb;AAcH;AACA,OA/CD;AAgDH;AACJ,GAneuB,CAqe5B;;;AACIrC,EAAAA,WAAW,GAAE;AACTO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,KAAKvB,KAAL,CAAWmE,MAAX,CAAkBC,QAAlD;;AACA,QAAG,KAAKpE,KAAL,CAAWmE,MAAX,CAAkBC,QAAlB,KAA+B,IAAlC,EAAuC;AACnC,YAAM5C,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,QAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,QAAAA,KAAK,EAAE,gDAFkB;AAGzBC,QAAAA,MAAM,EAAE,CAAC,KAAK3B,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHiB;AAIzBC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG;AAJQ,OAAjB,CAAZ;AAOI,UAAIkE,eAAe,GAAG,KAAKrE,KAAL,CAAWM,QAAjC;AACA,UAAIsB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,UAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,UAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,UAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AAEAY,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAG1B;AACA,YAAIC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAJ0B,CAQ1B;;AACA,YAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd;AAIA,YAAIiB,aAAa,GAAI,kDAAiDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAAtJ;AAEA,YAAIQ,QAAQ,GAAE,EAAd;AAEAC,QAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,UAAAA,QAAQ,GAAGK,IAAX;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACAM,UAAAA,UAAU,CAACN,QAAD,CAAV;AAEH,SATL;;AAWA,iBAASM,UAAT,CAAoBN,QAApB,EAA6B;AACzBlB,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,oBAAQ,SADW;AAEnB,oBAAQT;AAFW,WAAvB;AAIAlB,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,MAFK;AAGb,sBAAU,OAHG;AAIb,sBAAU;AACV,2BAAa,OADH;AAEV,0BAAY;AAFF,aAJG;AAQb,qBAAS;AACT,4BAAc,SADL;AAET,4BAAc,CAFL;AAGT,gCAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,WAAb;AAcH,SA/CyB,CAiD1B;;;AACA,YAAIC,SAAS,GAAG,EAAhB;AACAV,QAAAA,KAAK,CAAC,gDAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZM,UAAAA,SAAS,GAAGN,IAAZ;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY8B,SAAZ;AACAC,UAAAA,WAAW,CAACD,SAAD,CAAX;AACH,SAND;;AAQA,iBAASC,WAAT,CAAqBD,SAArB,EAA+B;AAC/B7B,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,UAAd,EAA0B;AAAEI,YAAAA,IAAI,EAAE,SAAR;AAAmBR,YAAAA,IAAI,EAAEM,SAAzB;AAAoCG,YAAAA,OAAO,EAAE,IAA7C;AAAmDC,YAAAA,cAAc,EAAE,EAAnE;AAAuE;AACjGC,YAAAA,aAAa,EAAE,EADW,CACR;;AADQ,WAA1B;AAIAlC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,YAAAA,EAAE,EAAE,UAAN;AAAkBJ,YAAAA,IAAI,EAAE,QAAxB;AAAkCK,YAAAA,MAAM,EAAE,UAA1C;AAAsDC,YAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAA9D;AACbC,YAAAA,KAAK,EAAE;AACP,gCAAkB,GADX;AAEP,qCAAuB,SAFhB;AAGP,qCAAuB,EAHhB;AAIP,uCAAyB,GAJlB;AAKP,8BAAgB,CAChB,MADgB,EAEhB,CAAC,KAAD,EAAQ,aAAR,CAFgB,EAGhB,SAHgB,EAIhB,CAJgB,EAKhB,SALgB,EAMhB,CANgB,EAOhB,SAPgB,CALT;AAcP,+BAAiB,CACjB,MADiB,EAEjB,CAAC,KAAD,EAAQ,aAAR,CAFiB,EAGjB,CAHiB,EAIjB,EAJiB,EAKjB,CALiB,EAMjB,EANiB,EAOjB,CAPiB;AAdV;AADM,WAAb;AA2BAtC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,YAAAA,EAAE,EAAE,mBADS;AAEbJ,YAAAA,IAAI,EAAE,QAFO;AAGbK,YAAAA,MAAM,EAAE,UAHK;AAIbC,YAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbC,YAAAA,KAAK,EAAE;AACP,8BAAgB,SADT;AAEP;AACA,+BAAiB,CAHV;AAIP,qCAAuB,CAJhB;AAKP,qCAAuB;AALhB;AALM,WAAb;AAaC;AACA,OAzGD;AA0GP;AACJ;;AACD7C,EAAAA,aAAa,GAAE;AACXK,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+B,KAAKvB,KAAL,CAAWmE,MAAX,CAAkBE,UAAjD;;AACA,QAAG,KAAKrE,KAAL,CAAWmE,MAAX,CAAkBE,UAAlB,KAAiC,IAApC,EAAyC;AACzC,YAAM7C,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,QAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,QAAAA,KAAK,EAAE,gDAFkB;AAGzBC,QAAAA,MAAM,EAAE,CAAE,KAAK3B,KAAL,CAAWC,GAAb,EAAkB,KAAKD,KAAL,CAAWE,GAA7B,CAHiB;AAIzBC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG;AAJQ,OAAjB,CAAZ;AAMI,UAAIkE,eAAe,GAAG,KAAKrE,KAAL,CAAWM,QAAjC;AACA,UAAIsB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,UAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,UAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,UAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AAEAY,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAE1B;AACA,YAAIC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAH0B,CAO1B;;AACA,YAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd;AAIA,YAAIiB,aAAa,GAAI,0DAAyDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAA9J;AAEA,YAAIQ,QAAQ,GAAE,EAAd;AAEAC,QAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,UAAAA,QAAQ,GAAGK,IAAX;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACAM,UAAAA,UAAU,CAACN,QAAD,CAAV;AAEH,SATL;;AAWA,iBAASM,UAAT,CAAoBN,QAApB,EAA6B;AACzBlB,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,oBAAQ,SADW;AAEnB,oBAAQT;AAFW,WAAvB;AAIAlB,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,MAFK;AAGb,sBAAU,OAHG;AAIb,sBAAU;AACV,2BAAa,OADH;AAEV,0BAAY;AAFF,aAJG;AAQb,qBAAS;AACT,4BAAc,SADL;AAET,4BAAc,CAFL;AAGT,gCAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,WAAb;AAcH,SA9CyB,CAgD1B;;;AACA,YAAIY,WAAW,GAAG,EAAlB;AACArB,QAAAA,KAAK,CAAC,8CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACZiB,UAAAA,WAAW,GAAGjB,IAAd;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAYyC,WAAZ;AACAC,UAAAA,aAAa,CAACD,WAAD,CAAb;AACH,SAND;;AAQA,iBAASC,aAAT,CAAuBD,WAAvB,EAAmC;AACnCxC,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,YAAd,EAA4B;AAAEI,YAAAA,IAAI,EAAE,SAAR;AAAmBR,YAAAA,IAAI,EAAEiB,WAAzB;AAAsCR,YAAAA,OAAO,EAAE,IAA/C;AAAqDC,YAAAA,cAAc,EAAE,EAArE;AAAyE;AACrGC,YAAAA,aAAa,EAAE,EADa,CACV;;AADU,WAA5B;AAIAlC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AAAEO,YAAAA,EAAE,EAAE,eAAN;AAAuBJ,YAAAA,IAAI,EAAE,QAA7B;AAAuCK,YAAAA,MAAM,EAAE,YAA/C;AAA6DC,YAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,aAAR,CAArE;AACbC,YAAAA,KAAK,EAAE;AACP,gCAAkB,GADX;AAEP,qCAAuB,SAFhB;AAGP,qCAAuB,EAHhB;AAIP,uCAAyB,GAJlB;AAKP,8BAAgB,CACZ,MADY,EACL,CAAC,KAAD,EAAQ,aAAR,CADK,EACkB,SADlB,EAC4B,CAD5B,EAC8B,SAD9B,EACwC,CADxC,EAC0C,SAD1C,CALT;AAQP,+BAAiB,CACb,MADa,EACN,CAAC,KAAD,EAAQ,aAAR,CADM,EACiB,CADjB,EACmB,EADnB,EACsB,CADtB,EACwB,EADxB,EAC2B,CAD3B;AARV;AADM,WAAb;AAeAtC,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACbO,YAAAA,EAAE,EAAE,yBADS;AAEbJ,YAAAA,IAAI,EAAE,QAFO;AAGbK,YAAAA,MAAM,EAAE,YAHK;AAIbC,YAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,aAAR,CAAN,CAJK;AAKbC,YAAAA,KAAK,EAAE;AACP,8BAAgB,SADT;AAEP;AACA,+BAAiB,CAHV;AAIP,qCAAuB,CAJhB;AAKP,qCAAuB;AALhB;AALM,WAAb;AAaC;AACA,OA5FD;AA6FH,KA7GD,MA8GI;AACA,YAAMtC,GAAG,GAAG,IAAI9B,QAAQ,CAACI,GAAb,CAAiB;AACzB2B,QAAAA,SAAS,EAAE,KAAKC,YADS;AAEzBC,QAAAA,KAAK,EAAE,gDAFkB;AAGzBC,QAAAA,MAAM,EAAE,CAAE,KAAK3B,KAAL,CAAWC,GAAb,EAAkB,KAAKD,KAAL,CAAWE,GAA7B,CAHiB;AAIzBC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG;AAJQ,OAAjB,CAAZ;AAMA,UAAIkE,eAAe,GAAG,KAAKrE,KAAL,CAAWM,QAAjC;AACA,UAAIsB,iBAAiB,GAAG,KAAK5B,KAAL,CAAWU,MAAnC;AACA,UAAImB,kBAAkB,GAAG,KAAK7B,KAAL,CAAWW,OAApC;AAEA,UAAImB,aAAa,GAAG,KAAK9B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIqB,aAAa,GAAG,KAAK/B,KAAL,CAAWU,MAAX,CAAkB,CAAlB,CAApB;AACA,UAAIsB,cAAc,GAAG,KAAKhC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AACA,UAAIsB,cAAc,GAAG,KAAKjC,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAArB;AAEAY,MAAAA,GAAG,CAACW,EAAJ,CAAO,MAAP,EAAe,YAAW;AAE1B;AACA,YAAIC,OAAO,GAAG,IAAI1C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHT,iBADG,EAEbU,KAFa,CAEPf,GAFO,CAAd,CAH0B,CAO1B;;AACA,YAAIgB,OAAO,GAAG,IAAI9C,QAAQ,CAAC2C,MAAb,GACbC,SADa,CACHR,kBADG,EAEbS,KAFa,CAEPf,GAFO,CAAd;AAIA,YAAIiB,aAAa,GAAI,kDAAiDV,aAAc,IAAGC,aAAc,iBAAgBC,cAAe,IAAGC,cAAe,EAAtJ;AAEA,YAAIQ,QAAQ,GAAE,EAAd;AAEAC,QAAAA,KAAK,CAACF,aAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZL,UAAAA,QAAQ,GAAGK,IAAX;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,aAAvB,EAAuC,GAAvC,EAA4CC,aAA5C;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkB,aAA7B;AACAnB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,QAA5C;AACAM,UAAAA,UAAU,CAACN,QAAD,CAAV;AAEH,SATL;;AAWA,iBAASM,UAAT,CAAoBN,QAApB,EAA6B;AACzBlB,UAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB;AACnB,oBAAQ,SADW;AAEnB,oBAAQT;AAFW,WAAvB;AAIAlB,UAAAA,GAAG,CAAC4B,QAAJ,CAAa;AACb,kBAAM,OADO;AAEb,oBAAQ,MAFK;AAGb,sBAAU,OAHG;AAIb,sBAAU;AACV,2BAAa,OADH;AAEV,0BAAY;AAFF,aAJG;AAQb,qBAAS;AACT,4BAAc,SADL;AAET,4BAAc,CAFL;AAGT,gCAAkB,CAAC,CAAD,EAAI,CAAJ;AAHT;AARI,WAAb;AAcH;AACA,OA/CD;AAgDC;AACR;;AAEDlC,EAAAA,YAAY,GAAE;AACV,QAAIqD,KAAK,GAAI,GAAE,KAAKtE,KAAL,CAAWQ,QAAS,EAAnC;AACA,WAAO8D,KAAP;AACH;;AAEDpD,EAAAA,YAAY,GAAE;AACV,QAAIoD,KAAK,GAAI,GAAE,KAAKtE,KAAL,CAAWS,QAAS,EAAnC;AACA,WAAO6D,KAAP;AACH;;AAELC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAEC,EAAE,IAAI,KAAK/C,YAAL,GAAoB+C,EAApC;AAAwC,MAAA,SAAS,EAAC,cAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAxyB2B;;AAAtB3E,G,CACK4E,W,GAAc/E,UAAU,CAACgF,Q;AAyyBpC,eAAe7E,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css'\nimport SubContext from '../../contexts/SubContext.js'\nimport Loading from '../Loading/Loading';\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ'\n\n\nclass Map extends Component {\n    static contextType = SubContext.Consumer\n    constructor(props) {\n        super(props);\n        this.state = {\n        lng: -3.711830,\n        lat: 40.438985,\n        zoom: 14,\n        maxZoom: 16,\n        minZoom: 1,\n        UserCoor: this.props.UserCoor,\n        mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        Message1 : 'Capa rosa encendida',\n        Message2 : 'Capa celeste encendida',\n        Origin: this.props.Origin,\n        Destiny : this.props.Destiny,\n        Loader: false\n        };\n        this.serLayerRed = this.setLayerRed.bind(this)\n        this.setLayerGreen = this.setLayerGreen.bind(this)\n        this.renderLayer1 = this.renderLayer1.bind(this)\n        this.renderLayer2 = this.renderLayer2.bind(this)\n        }\n\n\n\n\n/// ---- Map Inicialization ---- ///\n\ncomponentDidMount(){\n    function loadLoading(){\n        if(!this.state.Loader){\n            return <Loading/>\n        }       \n    }\n    loadLoading()\n    console.log(\"MAPA B1 DID MOUNT\")\n    const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom,\n        minZoom: 1\n        });\n        let originCoordinates = this.state.Origin\n        let destinyCoordinates = this.state.Destiny\n\n        let userOriginLon = this.state.Origin[0]\n        let userOriginLat = this.state.Origin[1]\n        let userDestinyLon = this.state.Destiny[0]\n        let userDestinyLat = this.state.Destiny[1]\n        map.on('load', function() {\n\n        // --- MARKER ORIGEN NUEVO --- //\n        let markerO = new mapboxgl.Marker()\n        .setLngLat(originCoordinates)\n        .addTo(map);\n\n         // --- MARKER DESTINO NUEVO --- //\n         let markerD = new mapboxgl.Marker()\n         .setLngLat(destinyCoordinates)\n         .addTo(map);\n\n         // --- CALCULATED ROUTE --- //\n         let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n         console.log(\"routePetition\", routePetition)\n        \n        let newRoute ={}    \n        fetch(routePetition)\n            .then(res => res.json())\n            .then((data) => {\n                newRoute = data\n                console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                console.log(\"routepetition\", routePetition)\n                console.log(\"respuesta de la api de rutas\", newRoute)\n                console.log(\"LAS RUTAS EN EL FETCH DEL DID MOUNT\")\n                paintRoute(newRoute)})\n            .catch( err => console.log(err))\n\n        function paintRoute(newRoute){\n            console.log(\"RUTAS PINTADAS\")\n            map.addSource('route', {\n                'type': 'geojson',\n                'data': newRoute\n                });\n            map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n            'line-join': 'round',\n            'line-cap': 'round'\n            },\n            'paint': {\n            'line-color': '#0065ff',\n            'line-width': 6,\n            'line-dasharray': [0, 2]\n            }\n            });\n        }\n        let RedPlaces = {}\n        fetch('https://route19api.herokuapp.com/routes/danger')\n        .then(res => res.json())\n        .then((data) => {\n            RedPlaces = data\n            console.log(\"redplaces\",RedPlaces)\n            paintMapRed(RedPlaces)\n        })\n\n        function paintMapRed(RedPlaces){\n        map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70, // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#FF5630',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#F4856C',\n        5,\n        '#FF5630',\n        20,\n        '#FF5630',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        2,\n        3,\n        4,\n        10,\n        8, \n        ]\n        }\n        });\n\n        map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['!', ['has', 'point_count']],\n        circleMinZoom: 16,\n        paint: {\n        'circle-color': '#FF5630',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 5,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#FF5630'\n        }\n        });\n        }\n        let GreenPlaces = {}\n        fetch('https://route19api.herokuapp.com/routes/safe')\n        .then(res => res.json())\n        .then((data) => {\n            GreenPlaces = data\n            console.log(\"greenplaces\", GreenPlaces)\n            paintMapGreen(GreenPlaces)\n        })\n\n        function paintMapGreen(GreenPlaces){\n        map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#00B8D9',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#00B8D9',\n        2,\n        '#00B8D9',\n        4,\n        '#00B8D9',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        5,\n        10,\n        7,\n        15,\n        9, \n        ]\n        }\n        });\n\n        map.addLayer({\n        id: 'green-unclustered-point',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n        'circle-color': '#00B8D9',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 7,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#00B8D9'\n        }\n        });\n        };\n    })\n}\n\n\n/// ---- Map Update ---- ///\n    componentDidUpdate() {\n        console.log(\"MAP B1 DID UPDATE\")\n        if (this.props.layers.RedLayer === true && this.props.layers.GreenLayer === true){           \n            const map = new mapboxgl.Map({\n                container: this.mapContainer,\n                style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                center: [this.state.lng, this.state.lat],\n                zoom: this.state.zoom,\n                // maxZoom: 16,\n                minZoom: this.state.minZoom\n                });\n                \n                let userCoordinates = this.state.UserCoor\n                let originCoordinates = this.state.Origin\n                let destinyCoordinates = this.state.Destiny\n\n                let userOriginLon = this.state.Origin[0]\n                let userOriginLat = this.state.Origin[1]\n                let userDestinyLon = this.state.Destiny[0]\n                let userDestinyLat = this.state.Destiny[1]\n                \n                map.on('load', function() {\n                console.log('las coor que le llegan a mapa b del usuario son:', userCoordinates)\n                \n                \n                // --- MARKER ORIGEN NUEVO --- //\n                let markerO = new mapboxgl.Marker()\n                .setLngLat(originCoordinates)\n                .addTo(map);\n        \n                 // --- MARKER DESTINO NUEVO --- //\n                let markerD = new mapboxgl.Marker()\n                .setLngLat(destinyCoordinates)\n                .addTo(map);\n\n\n                 // --- ROUTE --- //\n                let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n                \n                let newRoute ={}\n\n                fetch(routePetition)\n                    .then(res => res.json())\n                    .then((data) => {\n                        newRoute = data\n                        console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                        console.log(\"routepetition\", routePetition)\n                        console.log(\"respuesta de la api de rutas\", newRoute)\n                        console.log(\"MAP B1 RUTA EN DID UPDATE\")\n                        paintRoute(newRoute)\n                        \n                    })\n\n                function paintRoute(newRoute){\n                    map.addSource('route', {\n                        'type': 'geojson',\n                        'data': newRoute\n                        });\n                    map.addLayer({\n                    'id': 'route',\n                    'type': 'line',\n                    'source': 'route',\n                    'layout': {\n                    'line-join': 'round',\n                    'line-cap': 'round'\n                    },\n                    'paint': {\n                    'line-color': '#0065ff',\n                    'line-width': 6,\n                    'line-dasharray': [0, 2]\n                    }\n                    });\n                }\n        \n                //  --- RED LAYER --- //\n                let RedPlaces = {}\n                fetch('https://route19api.herokuapp.com/routes/danger')\n                .then(res => res.json())\n                .then((data) => {\n                    RedPlaces = data\n                    console.log(RedPlaces)\n                    paintMapRed(RedPlaces)\n                })\n\n                function paintMapRed(RedPlaces){\n                map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n                clusterRadius: 70, // Radius of each cluster when clustering points (defaults to 50)\n                });\n                \n                map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n                paint: {\n                // 'point_count': 10,\n                'circle-opacity': 0.7,\n                'circle-stroke-color': '#FF5630',\n                'circle-stroke-width': 10,\n                'circle-stroke-opacity': 0.5,\n                'circle-color': [\n                'step',\n                ['get', 'point_count'],\n                '#F4856C',\n                5,\n                '#FF5630',\n                20,\n                '#FF5630',\n                ],\n                'circle-radius': [\n                'step',\n                ['get', 'point_count'],\n                2,\n                3,\n                4,\n                10,\n                8, \n                ]\n                }\n                });\n\n                map.addLayer({\n                id: 'unclustered-point',\n                type: 'circle',\n                source: 'redzones',\n                filter: ['!', ['has', 'point_count']],\n                circleMinZoom: 16,\n                paint: {\n                'circle-color': '#FF5630',\n                // 'circle-opacity': 0.5,\n                'circle-radius': 5,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#FF5630'\n                }\n                });\n                }\n\n                //  --- GREEN LAYER --- //\n                let GreenPlaces = {}\n                fetch('https://route19api.herokuapp.com/routes/safe')\n                .then(res => res.json())\n                .then((data) => {\n                    GreenPlaces = data\n                    console.log(GreenPlaces)\n                    paintMapGreen(GreenPlaces)\n                })\n\n                function paintMapGreen(GreenPlaces){\n                    map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n                    clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n                    });\n\n                    map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n                    paint: {\n                    'circle-opacity': 0.7,\n                    'circle-stroke-color': '#00B8D9',\n                    'circle-stroke-width': 10,\n                    'circle-stroke-opacity': 0.5,\n                    'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#00B8D9',\n                    2,\n                    '#00B8D9',\n                    4,\n                    '#00B8D9',\n                    ],\n                    'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    5,\n                    10,\n                    7,\n                    15,\n                    9, \n                    ]\n                    }\n                    });\n\n                    map.addLayer({\n                    id: 'green-unclustered-point',\n                    type: 'circle',\n                    source: 'greenzones',\n                    filter: ['!', ['has', 'point_count']],\n                    paint: {\n                    'circle-color': '#00B8D9',\n                    // 'circle-opacity': 0.5,\n                    'circle-radius': 7,\n                    'circle-stroke-width': 1,\n                    'circle-stroke-color': '#00B8D9'\n                    }\n                    });\n                }\n            })   \n        }\n        else if(this.props.layers.RedLayer === true && this.props.layers.GreenLayer === false){\n                this.setLayerRed()\n                console.log(\"MAPA B DID UPDATE ELSE IF 1\", this.props.layers.GreenLayer)\n        }\n        else if(this.props.layers.RedLayer === false && this.props.layers.GreenLayer === true){\n                this.setLayerGreen()\n                console.log(\"MAPA B DID UPDATE ELSE IF 2\", this.props.layers.RedLayer)\n        }\n        else{\n            const map = new mapboxgl.Map({\n                container: this.mapContainer,\n                style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                center: [this.state.lng, this.state.lat],\n                zoom: this.state.zoom,\n                maxZoom: this.state.maxZoom,\n                minZoom: this.state.minZoom\n                });\n\n            let userCoordinates = this.state.UserCoor\n            let originCoordinates = this.state.Origin\n            let destinyCoordinates = this.state.Destiny\n\n            let userOriginLon = this.state.Origin[0]\n            let userOriginLat = this.state.Origin[1]\n            let userDestinyLon = this.state.Destiny[0]\n            let userDestinyLat = this.state.Destiny[1]\n\n            map.on('load', function() {\n            \n            // --- MARKER ORIGEN NUEVO --- //\n            let markerO = new mapboxgl.Marker()\n            .setLngLat(originCoordinates)\n            .addTo(map);\n    \n            // --- MARKER DESTINO NUEVO --- //\n            let markerD = new mapboxgl.Marker()\n            .setLngLat(destinyCoordinates)\n            .addTo(map);\n\n            let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n\n            let newRoute ={}\n\n            fetch(routePetition)\n                .then(res => res.json())\n                .then((data) => {\n                    newRoute = data\n                    console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                    console.log(\"routepetition\", routePetition)\n                    console.log(\"respuesta de la api de rutas\", newRoute)\n                    paintRoute(newRoute)\n                    \n                })\n\n            function paintRoute(newRoute){\n                map.addSource('route', {\n                    'type': 'geojson',\n                    'data': newRoute\n                    });\n                map.addLayer({\n                'id': 'route',\n                'type': 'line',\n                'source': 'route',\n                'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n                },\n                'paint': {\n                'line-color': '#0065ff',\n                'line-width': 6,\n                'line-dasharray': [0, 2]\n                }\n                });\n            }\n            })\n        }\n    }\n\n/// ---- Layers Selections ---- ///\n    setLayerRed(){  \n        console.log(\"esto es setLayer1\",this.props.layers.RedLayer)\n        if(this.props.layers.RedLayer === true){\n            const map = new mapboxgl.Map({\n                container: this.mapContainer,\n                style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                center: [this.state.lng, this.state.lat],\n                zoom: this.state.zoom\n                });\n\n                let userCoordinates = this.state.UserCoor\n                let originCoordinates = this.state.Origin\n                let destinyCoordinates = this.state.Destiny\n\n                let userOriginLon = this.state.Origin[0]\n                let userOriginLat = this.state.Origin[1]\n                let userDestinyLon = this.state.Destiny[0]\n                let userDestinyLat = this.state.Destiny[1]\n\n                map.on('load', function() {\n\n                \n                // --- MARKER ORIGEN NUEVO --- //\n                let markerO = new mapboxgl.Marker()\n                .setLngLat(originCoordinates)\n                .addTo(map);\n        \n                // --- MARKER DESTINO NUEVO --- //\n                let markerD = new mapboxgl.Marker()\n                .setLngLat(destinyCoordinates)\n                .addTo(map);\n\n                let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n\n                let newRoute ={}\n\n                fetch(routePetition)\n                    .then(res => res.json())\n                    .then((data) => {\n                        newRoute = data\n                        console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                        console.log(\"routepetition\", routePetition)\n                        console.log(\"respuesta de la api de rutas\", newRoute)\n                        paintRoute(newRoute)\n                        \n                    })\n\n                function paintRoute(newRoute){\n                    map.addSource('route', {\n                        'type': 'geojson',\n                        'data': newRoute\n                        });\n                    map.addLayer({\n                    'id': 'route',\n                    'type': 'line',\n                    'source': 'route',\n                    'layout': {\n                    'line-join': 'round',\n                    'line-cap': 'round'\n                    },\n                    'paint': {\n                    'line-color': '#0065ff',\n                    'line-width': 6,\n                    'line-dasharray': [0, 2]\n                    }\n                    });\n                }\n\n                //  --- RED LAYER --- //\n                let RedPlaces = {}\n                fetch('https://route19api.herokuapp.com/routes/danger')\n                .then(res => res.json())\n                .then((data) => {\n                    RedPlaces = data\n                    console.log(RedPlaces)\n                    paintMapRed(RedPlaces)\n                })\n\n                function paintMapRed(RedPlaces){\n                map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n                clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n                });\n\n                map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n                paint: {\n                'circle-opacity': 0.7,\n                'circle-stroke-color': '#FF5630',\n                'circle-stroke-width': 10,\n                'circle-stroke-opacity': 0.5,\n                'circle-color': [\n                'step',\n                ['get', 'point_count'],\n                '#FF5630',\n                2,\n                '#FF5630',\n                4,\n                '#FF5630',\n                ],\n                'circle-radius': [\n                'step',\n                ['get', 'point_count'],\n                5,\n                10,\n                7,\n                20,\n                9, \n                ]\n                }\n                });\n\n                map.addLayer({\n                id: 'unclustered-point',\n                type: 'circle',\n                source: 'redzones',\n                filter: ['!', ['has', 'point_count']],\n                paint: {\n                'circle-color': '#FF5630',\n                // 'circle-opacity': 0.5,\n                'circle-radius': 7,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#FF5630'\n                }\n                });\n                }\n                });                    \n        }\n    }\n    setLayerGreen(){\n        console.log(\"esto es setLayer\",this.props.layers.GreenLayer)\n        if(this.props.layers.GreenLayer === true){\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n            center: [ this.state.lng, this.state.lat ],\n            zoom: this.state.zoom\n            });\n            let userCoordinates = this.state.UserCoor\n            let originCoordinates = this.state.Origin\n            let destinyCoordinates = this.state.Destiny\n\n            let userOriginLon = this.state.Origin[0]\n            let userOriginLat = this.state.Origin[1]\n            let userDestinyLon = this.state.Destiny[0]\n            let userDestinyLat = this.state.Destiny[1]\n\n            map.on('load', function() {\n            \n            // --- MARKER ORIGEN NUEVO --- //\n            let markerO = new mapboxgl.Marker()\n            .setLngLat(originCoordinates)\n            .addTo(map);\n    \n            // --- MARKER DESTINO NUEVO --- //\n            let markerD = new mapboxgl.Marker()\n            .setLngLat(destinyCoordinates)\n            .addTo(map);\n\n            let routePetition = `https://route19api.herokuapp.com/routes/example/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n\n            let newRoute ={}\n\n            fetch(routePetition)\n                .then(res => res.json())\n                .then((data) => {\n                    newRoute = data\n                    console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                    console.log(\"routepetition\", routePetition)\n                    console.log(\"respuesta de la api de rutas\", newRoute)\n                    paintRoute(newRoute)\n                    \n                })\n\n            function paintRoute(newRoute){\n                map.addSource('route', {\n                    'type': 'geojson',\n                    'data': newRoute\n                    });\n                map.addLayer({\n                'id': 'route',\n                'type': 'line',\n                'source': 'route',\n                'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n                },\n                'paint': {\n                'line-color': '#0065ff',\n                'line-width': 6,\n                'line-dasharray': [0, 2]\n                }\n                });\n            }\n\n            //  --- GREEEN LAYER --- //\n            let GreenPlaces = {}\n            fetch('https://route19api.herokuapp.com/routes/safe')\n            .then(res => res.json())\n            .then((data) => {\n                GreenPlaces = data\n                console.log(GreenPlaces)\n                paintMapGreen(GreenPlaces)\n            })\n\n            function paintMapGreen(GreenPlaces){\n            map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 30, // Max zoom to cluster points on\n            clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n            });\n\n            map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n            paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#00B8D9',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': [\n                'step',['get', 'point_count'],'#00B8D9',2,'#00B8D9',4,'#00B8D9',\n            ],\n            'circle-radius': [\n                'step',['get', 'point_count'],5,10,7,15,9, \n            ]\n            }\n            });\n\n            map.addLayer({\n            id: 'green-unclustered-point',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n            'circle-color': '#00B8D9',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 7,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#00B8D9'\n            }\n            });\n            }\n            });\n        }\n        else{\n            const map = new mapboxgl.Map({\n                container: this.mapContainer,\n                style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                center: [ this.state.lng, this.state.lat ],\n                zoom: this.state.zoom\n                });\n            let userCoordinates = this.state.UserCoor\n            let originCoordinates = this.state.Origin\n            let destinyCoordinates = this.state.Destiny\n\n            let userOriginLon = this.state.Origin[0]\n            let userOriginLat = this.state.Origin[1]\n            let userDestinyLon = this.state.Destiny[0]\n            let userDestinyLat = this.state.Destiny[1]\n\n            map.on('load', function() {\n            \n            // --- MARKER ORIGEN NUEVO --- //\n            let markerO = new mapboxgl.Marker()\n            .setLngLat(originCoordinates)\n            .addTo(map);\n    \n            // --- MARKER DESTINO NUEVO --- //\n            let markerD = new mapboxgl.Marker()\n            .setLngLat(destinyCoordinates)\n            .addTo(map);\n\n            let routePetition = `https://route19api.herokuapp.com/routes/origin=${userOriginLon},${userOriginLat}0&destination=${userDestinyLon},${userDestinyLat}`\n\n            let newRoute ={}\n\n            fetch(routePetition)\n                .then(res => res.json())\n                .then((data) => {\n                    newRoute = data\n                    console.log(\"origen:\", userOriginLon , \",\", userOriginLat)\n                    console.log(\"routepetition\", routePetition)\n                    console.log(\"respuesta de la api de rutas\", newRoute)\n                    paintRoute(newRoute)\n                    \n                })\n\n            function paintRoute(newRoute){\n                map.addSource('route', {\n                    'type': 'geojson',\n                    'data': newRoute\n                    });\n                map.addLayer({\n                'id': 'route',\n                'type': 'line',\n                'source': 'route',\n                'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n                },\n                'paint': {\n                'line-color': '#0065ff',\n                'line-width': 6,\n                'line-dasharray': [0, 2]\n                }\n                });\n            }\n            })\n            }\n    }\n    \n    renderLayer1(){\n        let layer = `${this.state.Message1}`\n        return layer\n    }\n\n    renderLayer2(){\n        let layer = `${this.state.Message2}`\n        return layer\n    }\n\nrender() {\n    return (\n        <div>                \n            <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\n        </div>\n)\n}\n}\nexport default Map\n\n\n"]},"metadata":{},"sourceType":"module"}