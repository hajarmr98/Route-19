{"ast":null,"code":"var _jsxFileName = \"/home/hajar/Desktop/Projects/Route-19/src/components/SearchBar/InputDestiny.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport OptionsBox from './OptionsBox.js';\nimport styled from 'styled-components';\nimport SubContext from '../../contexts/SubContext.js';\nimport UserCoor from '../../contexts/UserCoor.js';\nconst AutosuggestContainer = styled.div`\n      width: 40%;\n      height: 40px;\n      color: #000;\n      border: 1px solid #0065FF;\n      background-color: #ffffff;\n      box-sizing: border-box;\n      border-radius: 1px;\n      margin: auto;\n      margin-bottom: 30px;\n      @media screen and (max-width: 768px){\n        width: 100%; \n      }\n`;\nlet Addresses = {};\nfetch('./MadridStreets.json').then(res => res.json()).then(data => {\n  Addresses = data;\n  console.log(Addresses);\n}); // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase().split(\",\");\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : Addresses.filter(item => {\n    if (inputValue.length === 1) {\n      const regex = new RegExp(inputValue[0], 'gi');\n      return item.address.match(regex);\n    } else {\n      const regex0 = new RegExp(inputValue[0], 'gi');\n      const regex1 = new RegExp(inputValue[1].substr(1, inputValue[1].length), 'gi');\n      return item.address.match(regex0);\n    }\n  });\n};\n\nconst getSuggestionValue = suggestion => {\n  let address = suggestion.address;\n  let city = suggestion.city;\n  let comma = \", \";\n  return address + comma + city;\n};\n\nfunction getOptionCoordinates(e) {\n  console.log(e.target.value);\n} // como limitar la cantidad de resultados?\n\n\nconst renderSuggestion = suggestion => {\n  // this.setState({...this.state, UserCoor: suggestion})\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SearchOptionsDest\",\n    onClick: e => getOptionCoordinates(e),\n    value: suggestion.coordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }\n  }, suggestion.address, \", \", suggestion.city);\n};\n\nconst renderInputComponent = inputProps => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"inputContainer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  className: \"icon\",\n  src: \"./images/DestinyIcon.svg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }\n}))); // const getCoordinates = () => {\n// }\n\n\nclass InputDestiny extends Component {\n  // static contextType = UserCoor\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n  }\n\n  onSuggestionSelected(event, {\n    suggestion,\n    suggestionValue,\n    suggestionIndex,\n    sectionIndex,\n    method\n  }) {\n    console.log(this.context);\n    console.log(\"destiny funcion que manda el context\");\n    this.context.getDestinyCoor(suggestion.coordinates);\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Introduce una direcciÃ³n',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(AutosuggestContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SubContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, context => /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSuggestionSelected,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      renderInputComponent: renderInputComponent,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nInputDestiny.contextType = SubContext.Consumer;\nexport default InputDestiny;","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/components/SearchBar/InputDestiny.js"],"names":["React","Component","Autosuggest","OptionsBox","styled","SubContext","UserCoor","AutosuggestContainer","div","Addresses","fetch","then","res","json","data","console","log","getSuggestions","value","inputValue","trim","toLowerCase","split","inputLength","length","filter","item","regex","RegExp","address","match","regex0","regex1","substr","getSuggestionValue","suggestion","city","comma","getOptionCoordinates","e","target","renderSuggestion","coordinates","renderInputComponent","inputProps","InputDestiny","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","onSuggestionSelected","bind","suggestionValue","suggestionIndex","sectionIndex","method","context","getDestinyCoor","render","placeholder","contextType","Consumer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Autosuggest from 'react-autosuggest';\nimport OptionsBox from './OptionsBox.js'\nimport styled from 'styled-components'\nimport SubContext from '../../contexts/SubContext.js'\n\nimport UserCoor from '../../contexts/UserCoor.js'\n\nconst AutosuggestContainer = styled.div`\n      width: 40%;\n      height: 40px;\n      color: #000;\n      border: 1px solid #0065FF;\n      background-color: #ffffff;\n      box-sizing: border-box;\n      border-radius: 1px;\n      margin: auto;\n      margin-bottom: 30px;\n      @media screen and (max-width: 768px){\n        width: 100%; \n      }\n`;\n\n    let Addresses = {}\n\n    fetch('./MadridStreets.json')\n        .then( res => res.json())\n        .then (data =>{ \n            Addresses = data\n            console.log(Addresses)\n            })\n    \n    // Teach Autosuggest how to calculate suggestions for any given input value.\n    const getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase().split(\",\");\n      const inputLength = inputValue.length;\n\n      return inputLength === 0 ? [] : Addresses.filter(item =>{\n        if (inputValue.length === 1) {\n            const regex = new RegExp(inputValue[0], 'gi');\n            return (item.address.match(regex));\n          } else {\n            const regex0 = new RegExp(inputValue[0], 'gi');\n            const regex1 = new RegExp(inputValue[1].substr(1, inputValue[1].length), 'gi');\n            return (item.address.match(regex0));\n          }\n      }\n      );\n    };\n\nconst getSuggestionValue = suggestion => {\n  let address = suggestion.address\n  let city = suggestion.city\n  let comma = \", \"\n  \n  return address + comma + city\n}\nfunction getOptionCoordinates(e){\n  console.log(e.target.value)\n\n}\n\n// como limitar la cantidad de resultados?\nconst renderSuggestion = suggestion => {\n    \n    // this.setState({...this.state, UserCoor: suggestion})\n    return <div className=\"SearchOptionsDest\" onClick={(e)=> getOptionCoordinates(e)} value={suggestion.coordinates}>{suggestion.address}, {suggestion.city}</div>\n}\n\nconst renderInputComponent = inputProps => (\n    <div className=\"inputContainer\">\n      <img className=\"icon\" src=\"./images/DestinyIcon.svg\" />\n      <input {...inputProps} />\n    </div>\n  );\n\n// const getCoordinates = () => {\n\n// }\n \nclass InputDestiny extends Component {\n  static contextType = SubContext.Consumer\n    // static contextType = UserCoor\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      suggestions: [],\n    };\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this)\n  }\n \n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n \n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n \n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionSelected(event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }){\n    console.log(this.context)\n    console.log(\"destiny funcion que manda el context\")\n    this.context.getDestinyCoor(suggestion.coordinates)\n  }\n \n\n\n  render() {\n    const { value, suggestions } = this.state;\n \n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Introduce una direcciÃ³n',\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <AutosuggestContainer>\n        <SubContext.Consumer>\n          {(context) =>  \n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                onSuggestionSelected={this.onSuggestionSelected}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                renderInputComponent={renderInputComponent}\n                inputProps={inputProps}\n            />\n          }\n            </SubContext.Consumer>\n        </AutosuggestContainer>\n    );\n  }\n}\n\nexport default InputDestiny"]},"metadata":{},"sourceType":"module"}