{"ast":null,"code":"var _jsxFileName = \"/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapTrial.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css';\nimport SubContext from '../../contexts/SubContext.js';\nimport Loading from '../Loading/Loading';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ';\nexport default class MapB2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -3.711830,\n      lat: 40.438985,\n      zoom: 14,\n      maxZoom: 16,\n      minZoom: 10,\n      UserCoor: this.props.UserCoor,\n      mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      Message1: 'Capa rosa encendida',\n      Message2: 'Capa celeste encendida',\n      Origin: this.props.Origin,\n      Destiny: this.props.Destiny,\n      Loader: true\n    }; // this.serLayerRed = this.setLayerRed.bind(this)\n    // this.setLayerGreen = this.setLayerGreen.bind(this)\n    // this.renderLayer1 = this.renderLayer1.bind(this)\n    // this.renderLayer2 = this.renderLayer2.bind(this)\n  }\n\n  componentDidMount() {\n    const {\n      Destiny,\n      Origin\n    } = this.props;\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    map.on('load', function () {\n      // --- MARKER ORIGIN --- //\n      let markerO = new mapboxgl.Marker({\n        color: '#0065ff'\n      }).setLngLat(Origin).addTo(map); // --- MARKER DESTINY --- //\n\n      let markerD = new mapboxgl.Marker({\n        color: 'green'\n      }).setLngLat(Destiny).addTo(map);\n    }); // --- CALCULATE ROUTE --- //\n\n    let routePetition = `https://route19api.herokuapp.com/routes/origin=${Origin[0]},${Origin[1]}0&destination=${Destiny[0]},${Destiny[1]}`;\n    console.log(\"routePetition\", routePetition);\n    let newRoute = {};\n    fetch(routePetition).then(res => res.json()).then(data => {\n      newRoute = data;\n      console.log(\"respuesta de la api de rutas\", newRoute);\n      paintRoute(newRoute);\n    }).catch(err => console.log(err));\n\n    function paintRoute(newRoute) {\n      const RemoveLoader = () => {\n        if (this.state.Loader) {\n          this.setState({ ...this.state,\n            Loader: false\n          });\n        }\n      };\n\n      map.addSource('route', {\n        'type': 'geojson',\n        'data': newRoute\n      });\n      map.addLayer({\n        'id': 'route',\n        'type': 'line',\n        'source': 'route',\n        'layout': {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        'paint': {\n          'line-color': '#0065ff',\n          'line-width': 6,\n          'line-dasharray': [0, 2]\n        }\n      });\n    }\n\n    let RedPlaces = {};\n    fetch('https://route19api.herokuapp.com/routes/danger').then(res => res.json()).then(data => {\n      RedPlaces = data;\n      console.log(\"redplaces\", RedPlaces);\n      paintMapRed(RedPlaces);\n    });\n\n    function paintMapRed(RedPlaces) {\n      map.addSource('redzones', {\n        type: 'geojson',\n        data: RedPlaces,\n        cluster: true,\n        clusterMaxZoom: 16,\n        clusterRadius: 70\n      });\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['has', 'point_count'],\n        paint: {\n          'circle-opacity': 0.7,\n          'circle-stroke-color': '#FF5630',\n          'circle-stroke-width': 10,\n          'circle-stroke-opacity': 0.5,\n          'circle-color': ['step', ['get', 'point_count'], '#F4856C', 5, '#FF5630', 20, '#FF5630'],\n          'circle-radius': ['step', ['get', 'point_count'], 2, 3, 4, 10, 8]\n        }\n      });\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['!', ['has', 'point_count']],\n        circleMinZoom: 16,\n        paint: {\n          'circle-color': '#FF5630',\n          // 'circle-opacity': 0.5,\n          'circle-radius': 5,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#FF5630'\n        }\n      });\n    }\n\n    let GreenPlaces = {};\n    fetch('https://route19api.herokuapp.com/routes/safe').then(res => res.json()).then(data => {\n      GreenPlaces = data;\n      console.log(\"greenplaces\", GreenPlaces);\n      paintMapGreen(GreenPlaces);\n    });\n\n    function paintMapGreen(GreenPlaces) {\n      map.addSource('greenzones', {\n        type: 'geojson',\n        data: GreenPlaces,\n        cluster: true,\n        clusterMaxZoom: 16,\n        clusterRadius: 70\n      });\n      map.addLayer({\n        id: 'greenclusters',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['has', 'point_count'],\n        paint: {\n          'circle-opacity': 0.7,\n          'circle-stroke-color': '#00B8D9',\n          'circle-stroke-width': 10,\n          'circle-stroke-opacity': 0.5,\n          'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n          'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n        }\n      });\n      map.addLayer({\n        id: 'green-unclustered-point',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#00B8D9',\n          // 'circle-opacity': 0.5,\n          'circle-radius': 7,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#00B8D9'\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapTrial.js"],"names":["React","Component","mapboxgl","SubContext","Loading","accessToken","MapB2","constructor","props","state","lng","lat","zoom","maxZoom","minZoom","UserCoor","mapStyle","Message1","Message2","Origin","Destiny","Loader","componentDidMount","map","Map","container","mapContainer","style","center","on","markerO","Marker","color","setLngLat","addTo","markerD","routePetition","console","log","newRoute","fetch","then","res","json","data","paintRoute","catch","err","RemoveLoader","setState","addSource","addLayer","RedPlaces","paintMapRed","type","cluster","clusterMaxZoom","clusterRadius","id","source","filter","paint","circleMinZoom","GreenPlaces","paintMapGreen","render","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css'\nimport SubContext from '../../contexts/SubContext.js'\nimport Loading from '../Loading/Loading';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ'\n\nexport default class MapB2 extends React.Component {\n    constructor(props) {\n        super(props);\n            this.state = {\n                lng: -3.711830,\n                lat: 40.438985,\n                zoom: 14,\n                maxZoom: 16,\n                minZoom: 10,\n                UserCoor: this.props.UserCoor,\n                mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                Message1 : 'Capa rosa encendida',\n                Message2 : 'Capa celeste encendida',\n                Origin: this.props.Origin,\n                Destiny : this.props.Destiny,\n                Loader: true\n            };\n            // this.serLayerRed = this.setLayerRed.bind(this)\n            // this.setLayerGreen = this.setLayerGreen.bind(this)\n            // this.renderLayer1 = this.renderLayer1.bind(this)\n            // this.renderLayer2 = this.renderLayer2.bind(this)\n        }\n\n    componentDidMount() {\n        const { Destiny, Origin } = this.props\n        const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n        });\n        \n        map.on('load', function() {\n            // --- MARKER ORIGIN --- //\n            let markerO = new mapboxgl.Marker({color: '#0065ff'})\n            .setLngLat(Origin)\n            .addTo(map);\n    \n             // --- MARKER DESTINY --- //\n             let markerD = new mapboxgl.Marker({color: 'green'})\n             .setLngLat(Destiny)\n             .addTo(map);\n        })\n\n            // --- CALCULATE ROUTE --- //\n            let routePetition = `https://route19api.herokuapp.com/routes/origin=${Origin[0]},${Origin[1]}0&destination=${Destiny[0]},${Destiny[1]}`\n            console.log(\"routePetition\", routePetition)\n            \n            let newRoute ={}    \n            fetch(routePetition)\n                .then(res => res.json())\n                .then((data) => {\n                    newRoute = data\n                    console.log(\"respuesta de la api de rutas\", newRoute)\n                    paintRoute(newRoute)})\n                .catch( err => console.log(err))\n\n        function paintRoute(newRoute){\n            const RemoveLoader = () =>{\n                if(this.state.Loader){\n                    this.setState({...this.state, Loader: false})\n                }\n            }\n            map.addSource('route', {\n                'type': 'geojson',\n                'data': newRoute\n                });\n            map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n            'line-join': 'round',\n            'line-cap': 'round'\n            },\n            'paint': {\n            'line-color': '#0065ff',\n            'line-width': 6,\n            'line-dasharray': [0, 2]\n            }\n            });\n        }\n\n        let RedPlaces = {}\n        fetch('https://route19api.herokuapp.com/routes/danger')\n        .then(res => res.json())\n        .then((data) => {\n            RedPlaces = data\n            console.log(\"redplaces\",RedPlaces)\n            paintMapRed(RedPlaces)\n        })\n\n        function paintMapRed(RedPlaces){\n        map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, \n        clusterRadius: 70, \n        });\n\n        map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#FF5630',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#F4856C',\n        5,\n        '#FF5630',\n        20,\n        '#FF5630',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        2,\n        3,\n        4,\n        10,\n        8, \n        ]\n        }\n        });\n\n        map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['!', ['has', 'point_count']],\n        circleMinZoom: 16,\n        paint: {\n        'circle-color': '#FF5630',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 5,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#FF5630'\n        }\n        });\n        }\n        let GreenPlaces = {}\n        fetch('https://route19api.herokuapp.com/routes/safe')\n        .then(res => res.json())\n        .then((data) => {\n            GreenPlaces = data\n            console.log(\"greenplaces\", GreenPlaces)\n            paintMapGreen(GreenPlaces)\n        })\n\n        function paintMapGreen(GreenPlaces){\n            map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 16, clusterRadius: 70 });\n\n        map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#00B8D9',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#00B8D9',\n        2,\n        '#00B8D9',\n        4,\n        '#00B8D9',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        5,\n        10,\n        7,\n        15,\n        9, \n        ]\n        }\n        });\n\n        map.addLayer({\n        id: 'green-unclustered-point',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n        'circle-color': '#00B8D9',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 7,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#00B8D9'\n        }\n        });\n    }\n    }\n    render() {\n            return (\n                <div>\n                    <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\n                    {/* <Loading/> */}\n                </div>\n            )\n        }\n}\n"]},"metadata":{},"sourceType":"module"}