{"ast":null,"code":"var _jsxFileName = \"/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapB.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css';\nimport SubContext from '../../contexts/SubContext.js';\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ';\n\nclass Map extends Component {\n  // static contextType = SubContext.Consumer\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -3.711830,\n      lat: 40.438985,\n      zoom: 14,\n      maxZoom: 16,\n      minZoom: 1,\n      UserCoor: this.props.UserCoor,\n      //  \n      mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      Message1: 'Capa rosa encendida',\n      Message2: 'Capa celeste encendida',\n      Origin: [],\n      Destiny: []\n    };\n    this.serLayerRed = this.setLayerRed.bind(this);\n    this.setLayerGreen = this.setLayerGreen.bind(this);\n    this.renderLayer1 = this.renderLayer1.bind(this);\n    this.renderLayer2 = this.renderLayer2.bind(this);\n  } /// ---- Map Inicialization ---- ///\n\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      minZoom: 1\n    });\n    let userCoordinates = this.props.UserCoor;\n    map.on('load', function () {\n      let marker = new mapboxgl.Marker({\n        color: '#0065ff'\n      }).setLngLat(userCoordinates).addTo(map);\n      console.log(\"UserCoordinates\", userCoordinates);\n      let RedPlaces = {};\n      fetch('https://route19api.herokuapp.com/map/danger').then(res => res.json()).then(data => {\n        RedPlaces = data;\n        console.log(RedPlaces);\n        paintMapRed(RedPlaces);\n      });\n\n      function paintMapRed(RedPlaces) {\n        map.addSource('redzones', {\n          type: 'geojson',\n          data: RedPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            // 'point_count': 10,\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#FF5630',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#F4856C', 5, '#FF5630', 20, '#FF5630'],\n            'circle-radius': ['step', ['get', 'point_count'], 2, 3, 4, 10, 8]\n          }\n        }); // map.addLayer({\n        // id: 'red-cluster-count',\n        // type: 'symbol',\n        // source: 'redzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['!', ['has', 'point_count']],\n          circleMinZoom: 16,\n          paint: {\n            'circle-color': '#FF5630',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 5,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#FF5630'\n          }\n        });\n      }\n\n      let GreenPlaces = {};\n      fetch('https://route19api.herokuapp.com/map/safe').then(res => res.json()).then(data => {\n        GreenPlaces = data;\n        console.log(GreenPlaces);\n        paintMapGreen(GreenPlaces);\n      });\n\n      function paintMapGreen(GreenPlaces) {\n        map.addSource('greenzones', {\n          type: 'geojson',\n          data: GreenPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'greenclusters',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#00B8D9',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n            'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n          }\n        }); // map.addLayer({\n        // id: 'green-cluster-count',\n        // type: 'symbol',\n        // source: 'greenzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n          id: 'green-unclustered-point',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#00B8D9',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 7,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#00B8D9'\n          }\n        });\n      }\n\n      ;\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"MAPA B DID UPDATE\");\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      // maxZoom: 16,\n      minZoom: 1\n    });\n    let userCoordinates = this.props.UserCoor;\n    console.log(\"fuera de load UPDATE\", this.state.UserCoor);\n    map.on('load', function () {\n      console.log(\"dentro de load UPDATE\", userCoordinates);\n      let marker = new mapboxgl.Marker().setLngLat(userCoordinates).addTo(map);\n      console.log(\"denbajo de marker UPDATE\", userCoordinates);\n      let RedPlaces = {};\n      fetch('https://route19api.herokuapp.com/map/danger').then(res => res.json()).then(data => {\n        RedPlaces = data;\n        console.log(RedPlaces);\n        paintMapRed(RedPlaces);\n      });\n\n      function paintMapRed(RedPlaces) {\n        map.addSource('redzones', {\n          type: 'geojson',\n          data: RedPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            // 'point_count': 10,\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#FF5630',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#F4856C', 5, '#FF5630', 20, '#FF5630'],\n            'circle-radius': ['step', ['get', 'point_count'], 2, 3, 4, 10, 8]\n          }\n        }); // map.addLayer({\n        // id: 'red-cluster-count',\n        // type: 'symbol',\n        // source: 'redzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'redzones',\n          filter: ['!', ['has', 'point_count']],\n          circleMinZoom: 16,\n          paint: {\n            'circle-color': '#FF5630',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 5,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#FF5630'\n          }\n        });\n      }\n\n      let GreenPlaces = {};\n      fetch('https://route19api.herokuapp.com/map/safe').then(res => res.json()).then(data => {\n        GreenPlaces = data;\n        console.log(GreenPlaces);\n        paintMapGreen(GreenPlaces);\n      });\n\n      function paintMapGreen(GreenPlaces) {\n        map.addSource('greenzones', {\n          type: 'geojson',\n          data: GreenPlaces,\n          cluster: true,\n          clusterMaxZoom: 16,\n          // Max zoom to cluster points on\n          clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        map.addLayer({\n          id: 'greenclusters',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['has', 'point_count'],\n          paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#00B8D9',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n            'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n          }\n        }); // map.addLayer({\n        // id: 'green-cluster-count',\n        // type: 'symbol',\n        // source: 'greenzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n          id: 'green-unclustered-point',\n          type: 'circle',\n          source: 'greenzones',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#00B8D9',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 7,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#00B8D9'\n          }\n        });\n      }\n\n      ;\n    });\n  }\n\n  async setLayerRed() {\n    await console.log(\"esto es setLayer1\", this.props.layers.CircleLayer);\n\n    if (this.props.layers.CircleLayer === true) {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      map.on('load', function () {\n        //  --- MARKER ORIGEN --- //\n        let marker = new mapboxgl.Marker().setLngLat(userCoordinates).addTo(map); //  --- RED LAYER --- //\n\n        let RedPlaces = {};\n        fetch('https://route19api.herokuapp.com/map/danger').then(res => res.json()).then(data => {\n          RedPlaces = data;\n          console.log(RedPlaces);\n          paintMapRed(RedPlaces);\n        });\n\n        function paintMapRed(RedPlaces) {\n          map.addSource('redzones', {\n            type: 'geojson',\n            data: RedPlaces,\n            cluster: true,\n            clusterMaxZoom: 10,\n            // Max zoom to cluster points on\n            clusterRadius: 5 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#FF5630',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#FF5630', 2, '#FF5630', 4, '#FF5630'],\n              'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 20, 9]\n            }\n          }); // map.addLayer({\n          // id: 'cluster-count',\n          // type: 'symbol',\n          // source: 'redzones',\n          // filter: ['has', 'point_count'],\n          // layout: {\n          // 'text-field': '{point_count_abbreviated}',\n          // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          // 'text-size': 20\n          // }\n          // });\n\n          map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'redzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n              'circle-color': '#FF5630',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 7,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#FF5630'\n            }\n          });\n        }\n      });\n      await this.setState({ ...this.state,\n        Message1: 'Capa rosa encendida'\n      });\n    } else {\n      await this.setState({ ...this.state,\n        Message1: 'Capa rosa apagada'\n      });\n    }\n  }\n\n  async setLayerGreen() {\n    await console.log(\"esto es setLayer\", this.props.layers.RouteLayer);\n\n    if (this.props.layers.RouteLayer === true) {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      let userCoordinates = this.state.UserCoor;\n      map.on('load', function () {\n        //  --- MARKER ORIGEN --- //\n        let marker = new mapboxgl.Marker().setLngLat(userCoordinates).addTo(map); //  --- GREEEN LAYER --- //\n\n        let GreenPlaces = {};\n        fetch('https://route19api.herokuapp.com/map/safe').then(res => res.json()).then(data => {\n          GreenPlaces = data;\n          console.log(GreenPlaces);\n          paintMapGreen(GreenPlaces);\n        });\n\n        function paintMapGreen(GreenPlaces) {\n          map.addSource('greenzones', {\n            type: 'geojson',\n            data: GreenPlaces,\n            cluster: true,\n            clusterMaxZoom: 30,\n            // Max zoom to cluster points on\n            clusterRadius: 5 // Radius of each cluster when clustering points (defaults to 50)\n\n          });\n          map.addLayer({\n            id: 'greenclusters',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['has', 'point_count'],\n            paint: {\n              'circle-opacity': 0.7,\n              'circle-stroke-color': '#00B8D9',\n              'circle-stroke-width': 10,\n              'circle-stroke-opacity': 0.5,\n              'circle-color': ['step', ['get', 'point_count'], '#00B8D9', 2, '#00B8D9', 4, '#00B8D9'],\n              'circle-radius': ['step', ['get', 'point_count'], 5, 10, 7, 15, 9]\n            }\n          }); // map.addLayer({\n          // id: 'cluster-count',\n          // type: 'symbol',\n          // source: 'greenzones',\n          // filter: ['has', 'point_count'],\n          // layout: {\n          // 'text-field': '{point_count_abbreviated}',\n          // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          // 'text-size': 20\n          // }\n          // });\n\n          map.addLayer({\n            id: 'green-unclustered-point',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n              'circle-color': '#00B8D9',\n              // 'circle-opacity': 0.5,\n              'circle-radius': 7,\n              'circle-stroke-width': 1,\n              'circle-stroke-color': '#00B8D9'\n            }\n          });\n        }\n      });\n      await this.setState({ ...this.state,\n        Message2: 'Capa celeste encendida'\n      });\n    } else {\n      await this.setState({ ...this.state,\n        Message2: 'Capa celeste apagada'\n      });\n    }\n  }\n\n  renderLayer1() {\n    let layer = `${this.state.Message1}`;\n    return layer;\n  }\n\n  renderLayer2() {\n    let layer = `${this.state.Message2}`;\n    return layer;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/components/Map/MapB.js"],"names":["React","Component","mapboxgl","SubContext","accessToken","Map","constructor","props","state","lng","lat","zoom","maxZoom","minZoom","UserCoor","mapStyle","Message1","Message2","Origin","Destiny","serLayerRed","setLayerRed","bind","setLayerGreen","renderLayer1","renderLayer2","componentDidMount","map","container","mapContainer","style","center","userCoordinates","on","marker","Marker","color","setLngLat","addTo","console","log","RedPlaces","fetch","then","res","json","data","paintMapRed","addSource","type","cluster","clusterMaxZoom","clusterRadius","addLayer","id","source","filter","paint","circleMinZoom","GreenPlaces","paintMapGreen","componentDidUpdate","layers","CircleLayer","setState","RouteLayer","layer","render","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl';\nimport './Map.css'\nimport SubContext from '../../contexts/SubContext.js'\nmapboxgl.accessToken = 'pk.eyJ1Ijoic29seiIsImEiOiJja2FpYWJobjIwbzVtMnNvNTdmNGF4NHJ2In0.HP3anVetw1Hw0MxhQJPagQ'\n\n\nclass Map extends Component {\n    // static contextType = SubContext.Consumer\n    constructor(props) {\n        super(props);\n        this.state = {\n        lng: -3.711830,\n        lat: 40.438985,\n        zoom: 14,\n        maxZoom: 16,\n        minZoom: 1,\n        UserCoor: this.props.UserCoor,\n        //  \n        mapStyle: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        Message1 : 'Capa rosa encendida',\n        Message2 : 'Capa celeste encendida',\n        Origin: [],\n        Destiny : []\n        };\n        this.serLayerRed = this.setLayerRed.bind(this)\n        this.setLayerGreen = this.setLayerGreen.bind(this)\n        this.renderLayer1 = this.renderLayer1.bind(this)\n        this.renderLayer2 = this.renderLayer2.bind(this)\n\n        }\n\n/// ---- Map Inicialization ---- ///\n    \ncomponentDidMount(){\n    const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom,\n        minZoom: 1\n        });\n\n        let userCoordinates = this.props.UserCoor\n        map.on('load', function() {\n        let marker = new mapboxgl.Marker({color: '#0065ff'})\n        .setLngLat(userCoordinates)\n        .addTo(map);\n        console.log(\"UserCoordinates\", userCoordinates)\n\n        \n        let RedPlaces = {}\n        fetch('https://route19api.herokuapp.com/map/danger')\n        .then(res => res.json())\n        .then((data) => {\n            RedPlaces = data\n            console.log(RedPlaces)\n            paintMapRed(RedPlaces)\n        })\n\n        function paintMapRed(RedPlaces){\n        map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70, // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n        paint: {\n        // 'point_count': 10,\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#FF5630',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#F4856C',\n        5,\n        '#FF5630',\n        20,\n        '#FF5630',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        2,\n        3,\n        4,\n        10,\n        8, \n        ]\n        }\n        });\n\n        // map.addLayer({\n        // id: 'red-cluster-count',\n        // type: 'symbol',\n        // source: 'redzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n        map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['!', ['has', 'point_count']],\n        circleMinZoom: 16,\n        paint: {\n        'circle-color': '#FF5630',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 5,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#FF5630'\n        }\n        });\n        }\n        let GreenPlaces = {}\n        fetch('https://route19api.herokuapp.com/map/safe')\n        .then(res => res.json())\n        .then((data) => {\n            GreenPlaces = data\n            console.log(GreenPlaces)\n            paintMapGreen(GreenPlaces)\n        })\n\n        function paintMapGreen(GreenPlaces){\n        map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#00B8D9',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#00B8D9',\n        2,\n        '#00B8D9',\n        4,\n        '#00B8D9',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        5,\n        10,\n        7,\n        15,\n        9, \n        ]\n        }\n        });\n\n        // map.addLayer({\n        // id: 'green-cluster-count',\n        // type: 'symbol',\n        // source: 'greenzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n        id: 'green-unclustered-point',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n        'circle-color': '#00B8D9',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 7,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#00B8D9'\n        }\n        });\n        };\n    })\n}\n\ncomponentDidUpdate(){\n    console.log(\"MAPA B DID UPDATE\")\n    const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom,\n        // maxZoom: 16,\n        minZoom: 1\n        });\n\n        let userCoordinates = this.props.UserCoor\n        console.log(\"fuera de load UPDATE\", this.state.UserCoor)\n        map.on('load', function() {\n        console.log(\"dentro de load UPDATE\", userCoordinates)\n\n        let marker = new mapboxgl.Marker()\n        .setLngLat(userCoordinates)\n        .addTo(map);\n        console.log(\"denbajo de marker UPDATE\", userCoordinates)\n\n        \n        let RedPlaces = {}\n        fetch('https://route19api.herokuapp.com/map/danger')\n        .then(res => res.json())\n        .then((data) => {\n            RedPlaces = data\n            console.log(RedPlaces)\n            paintMapRed(RedPlaces)\n        })\n\n        function paintMapRed(RedPlaces){\n        map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70, // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n        paint: {\n        // 'point_count': 10,\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#FF5630',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#F4856C',\n        5,\n        '#FF5630',\n        20,\n        '#FF5630',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        2,\n        3,\n        4,\n        10,\n        8, \n        ]\n        }\n        });\n\n        // map.addLayer({\n        // id: 'red-cluster-count',\n        // type: 'symbol',\n        // source: 'redzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n        map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: 'redzones',\n        filter: ['!', ['has', 'point_count']],\n        circleMinZoom: 16,\n        paint: {\n        'circle-color': '#FF5630',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 5,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#FF5630'\n        }\n        });\n        }\n        let GreenPlaces = {}\n        fetch('https://route19api.herokuapp.com/map/safe')\n        .then(res => res.json())\n        .then((data) => {\n            GreenPlaces = data\n            console.log(GreenPlaces)\n            paintMapGreen(GreenPlaces)\n        })\n\n        function paintMapGreen(GreenPlaces){\n        map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 16, // Max zoom to cluster points on\n        clusterRadius: 70 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n        paint: {\n        'circle-opacity': 0.7,\n        'circle-stroke-color': '#00B8D9',\n        'circle-stroke-width': 10,\n        'circle-stroke-opacity': 0.5,\n        'circle-color': [\n        'step',\n        ['get', 'point_count'],\n        '#00B8D9',\n        2,\n        '#00B8D9',\n        4,\n        '#00B8D9',\n        ],\n        'circle-radius': [\n        'step',\n        ['get', 'point_count'],\n        5,\n        10,\n        7,\n        15,\n        9, \n        ]\n        }\n        });\n\n        // map.addLayer({\n        // id: 'green-cluster-count',\n        // type: 'symbol',\n        // source: 'greenzones',\n        // filter: ['has', 'point_count'],\n        // layout: {\n        // 'text-field': '{point_count_abbreviated}',\n        // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n        // 'text-size': 20\n        // }\n        // });\n\n        map.addLayer({\n        id: 'green-unclustered-point',\n        type: 'circle',\n        source: 'greenzones',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n        'circle-color': '#00B8D9',\n        // 'circle-opacity': 0.5,\n        'circle-radius': 7,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#00B8D9'\n        }\n        });\n        };\n    })\n}\n\n    async setLayerRed(){  \n        await console.log(\"esto es setLayer1\",this.props.layers.CircleLayer)\n        if(this.props.layers.CircleLayer === true){\n            const map = new mapboxgl.Map({\n                container: this.mapContainer,\n                style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n                center: [this.state.lng, this.state.lat],\n                zoom: this.state.zoom\n                });\n\n                let userCoordinates = this.state.UserCoor\n\n                map.on('load', function() {\n\n                //  --- MARKER ORIGEN --- //\n                let marker = new mapboxgl.Marker()\n                .setLngLat(userCoordinates)\n                .addTo(map);\n\n                //  --- RED LAYER --- //\n                let RedPlaces = {}\n                fetch('https://route19api.herokuapp.com/map/danger')\n                .then(res => res.json())\n                .then((data) => {\n                    RedPlaces = data\n                    console.log(RedPlaces)\n                    paintMapRed(RedPlaces)\n                })\n\n                function paintMapRed(RedPlaces){\n                map.addSource('redzones', { type: 'geojson', data: RedPlaces, cluster: true, clusterMaxZoom: 10, // Max zoom to cluster points on\n                clusterRadius: 5 // Radius of each cluster when clustering points (defaults to 50)\n                });\n\n                map.addLayer({ id: 'clusters', type: 'circle', source: 'redzones', filter: ['has', 'point_count'],\n                paint: {\n                'circle-opacity': 0.7,\n                'circle-stroke-color': '#FF5630',\n                'circle-stroke-width': 10,\n                'circle-stroke-opacity': 0.5,\n                'circle-color': [\n                'step',\n                ['get', 'point_count'],\n                '#FF5630',\n                2,\n                '#FF5630',\n                4,\n                '#FF5630',\n                ],\n                'circle-radius': [\n                'step',\n                ['get', 'point_count'],\n                5,\n                10,\n                7,\n                20,\n                9, \n                ]\n                }\n                });\n\n                // map.addLayer({\n                // id: 'cluster-count',\n                // type: 'symbol',\n                // source: 'redzones',\n                // filter: ['has', 'point_count'],\n                // layout: {\n                // 'text-field': '{point_count_abbreviated}',\n                // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                // 'text-size': 20\n                // }\n                // });\n\n                map.addLayer({\n                id: 'unclustered-point',\n                type: 'circle',\n                source: 'redzones',\n                filter: ['!', ['has', 'point_count']],\n                paint: {\n                'circle-color': '#FF5630',\n                // 'circle-opacity': 0.5,\n                'circle-radius': 7,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#FF5630'\n                }\n                });\n                }\n                });                    \n            await this.setState({...this.state, Message1 : 'Capa rosa encendida'})\n        }\n        else{    \n            await this.setState({...this.state, Message1 : 'Capa rosa apagada'})\n        }\n    }\n    async setLayerGreen(){\n        await console.log(\"esto es setLayer\",this.props.layers.RouteLayer)\n        if(this.props.layers.RouteLayer === true){\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/solz/ckcniloal0gm51inb4shmlxaj',\n            center: [ this.state.lng, this.state.lat ],\n            zoom: this.state.zoom\n            });\n            let userCoordinates = this.state.UserCoor\n\n            map.on('load', function() {\n            //  --- MARKER ORIGEN --- //\n            let marker = new mapboxgl.Marker()\n            .setLngLat(userCoordinates)\n            .addTo(map);\n\n            //  --- GREEEN LAYER --- //\n            let GreenPlaces = {}\n            fetch('https://route19api.herokuapp.com/map/safe')\n            .then(res => res.json())\n            .then((data) => {\n                GreenPlaces = data\n                console.log(GreenPlaces)\n                paintMapGreen(GreenPlaces)\n            })\n\n            function paintMapGreen(GreenPlaces){\n            map.addSource('greenzones', { type: 'geojson', data: GreenPlaces, cluster: true, clusterMaxZoom: 30, // Max zoom to cluster points on\n            clusterRadius: 5 // Radius of each cluster when clustering points (defaults to 50)\n            });\n\n            map.addLayer({ id: 'greenclusters', type: 'circle', source: 'greenzones', filter: ['has', 'point_count'],\n            paint: {\n            'circle-opacity': 0.7,\n            'circle-stroke-color': '#00B8D9',\n            'circle-stroke-width': 10,\n            'circle-stroke-opacity': 0.5,\n            'circle-color': [\n            'step',\n            ['get', 'point_count'],\n            '#00B8D9',\n            2,\n            '#00B8D9',\n            4,\n            '#00B8D9',\n            ],\n            'circle-radius': [\n            'step',\n            ['get', 'point_count'],\n            5,\n            10,\n            7,\n            15,\n            9, \n            ]\n            }\n            });\n\n            // map.addLayer({\n            // id: 'cluster-count',\n            // type: 'symbol',\n            // source: 'greenzones',\n            // filter: ['has', 'point_count'],\n            // layout: {\n            // 'text-field': '{point_count_abbreviated}',\n            // 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            // 'text-size': 20\n            // }\n            // });\n\n            map.addLayer({\n            id: 'green-unclustered-point',\n            type: 'circle',\n            source: 'greenzones',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n            'circle-color': '#00B8D9',\n            // 'circle-opacity': 0.5,\n            'circle-radius': 7,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#00B8D9'\n            }\n            });\n            }\n            });\n            await this.setState({...this.state, Message2 : 'Capa celeste encendida'})\n        }\n        else{\n            await this.setState({...this.state, Message2 : 'Capa celeste apagada'})\n            }\n    }\n    \n    renderLayer1(){\n        let layer = `${this.state.Message1}`\n        return layer\n    }\n\n    renderLayer2(){\n        let layer = `${this.state.Message2}`\n        return layer\n    }\n\n        render() {\n            return (\n            <div>\n                <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\n                {/* <p>{this.renderLayer1()}</p>\n                <p>{this.renderLayer2()}</p> */}\n            </div>\n        )\n        }\n}\n\nexport default Map\n\n\n"]},"metadata":{},"sourceType":"module"}