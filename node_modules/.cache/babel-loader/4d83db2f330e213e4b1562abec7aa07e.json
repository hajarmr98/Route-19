{"ast":null,"code":"import firebaseconfig from './firebaseIndex.js';\nimport firebase from 'firebase';\nexport const authMethods = {\n  // firebase helper methods go here... \n  signup: (email, password, setErrors, setToken) => {\n    firebase.auth().createUserWithEmailAndPassword(email, password) //make res asynchonous so that we can make grab the token before saving it.\n    .then(async res => {\n      const token = await Object.entries(res.user)[5][1].b; //set token to localStorage \n\n      await localStorage.setItem('token', token);\n      setToken(token); //grab token from local storage and set to state. \n\n      console.log(res);\n    }).catch(err => {\n      setErrors(prev => [...prev, err.message]);\n    });\n  },\n  signin: (email, password, setErrors, setToken) => {\n    //change from create users to...\n    firebase.auth().signInWithEmailAndPassword(email, password) //everything is almost exactly the same as the function above\n    .then(async res => {\n      const token = await Object.entries(res.user)[5][1].b; //set token to localStorage \n\n      await localStorage.setItem('token', token);\n      setToken(window.localStorage.token);\n    }).catch(err => {\n      setErrors(prev => [...prev, err.message]);\n    });\n  },\n  //no need for email and password\n  signout: (setErrors, setToken) => {\n    // signOut is a no argument function\n    firebase.auth().signOut().then(res => {\n      //remove the token\n      localStorage.removeItem('token'); //set the token back to original state\n\n      setToken(null);\n    }).catch(err => {\n      //there shouldn't every be an error from firebase but just in case\n      setErrors(prev => [...prev, err.message]); //whether firebase does the trick or not i want my user to do there thing.\n\n      localStorage.removeItem('token');\n      setToken(null);\n      console.error(err.message);\n    });\n  }\n}; // import firebaseConfig from './firebaseIndex'\n// import firebase from 'firebase'\n// export const authMethods = {\n//                 // firebase helper methods go here... \n//                 signup: (email, password, setErrors, setToken) => {\n//                   firebase.auth().createUserWithEmailAndPassword(email,password) \n//                     //make res asynchronous so that we can make grab the token before saving it.\n//                     .then( async res => {\n//                       const token = await Object.entries(res.user)[5][1].b\n//                       console.log(token)\n//                         //set token to localStorage \n//                         await localStorage.setItem('token', token)\n//                         //grab token from local storage and set to state. \n//                         setToken(window.localStorage.token)\n//                       console.log(res)\n//                     })\n//                     .catch(err => {\n//                       setErrors(prev => ([...prev, err.message]))\n//                     })\n//                   },\n//                   signin: (email, password, setErrors, setToken) => {\n//                     //change from create users to...\n//                     firebase.auth().signInWithEmailAndPassword(email,password) \n//                       //everything is almost exactly the same as the function above\n//                       .then( async res => {\n//                         const token = await Object.entries(res.user)[5][1].b\n//                           //set token to localStorage \n//                           await localStorage.setItem('token', token)\n//                           setToken(window.localStorage.token)\n//                             console.log(res)\n//                       })\n//                       .catch(err => {\n//                         setErrors(prev => ([...prev, err.message]))\n//                       })\n//                     },\n//                     signout: (setErrors, setToken) => {\n//                       // signOut is a no argument function\n//                     firebase.auth().signOut().then( res => {\n//                       //remove the token\n//                       localStorage.removeItem('token')\n//                         //set the token back to original state\n//                         setToken(null)\n//                     })\n//                     .catch(err => {\n//                       //there shouldn't every be an error from firebase but just in case\n//                       setErrors(prev => ([...prev, err.message]))\n//                       //whether firebase does the trick or not i want my user to do there thing.\n//                         localStorage.removeItem('token')\n//                           setToken(null)\n//                             console.error(err.message)\n//                     })\n//                     },\n//     }","map":{"version":3,"sources":["/home/hajar/Desktop/Projects/Route-19/src/firebase/authmethods.js"],"names":["firebaseconfig","firebase","authMethods","signup","email","password","setErrors","setToken","auth","createUserWithEmailAndPassword","then","res","token","Object","entries","user","b","localStorage","setItem","console","log","catch","err","prev","message","signin","signInWithEmailAndPassword","window","signout","signOut","removeItem","error"],"mappings":"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","sourcesContent":["import firebaseconfig from './firebaseIndex.js'\nimport firebase from 'firebase'\n\nexport const authMethods = {\n  // firebase helper methods go here... \n  signup: (email, password, setErrors,setToken ) => {\n    firebase.auth().createUserWithEmailAndPassword(email,password) \n      //make res asynchonous so that we can make grab the token before saving it.\n      .then( async res => {\n        const token = await Object.entries(res.user)[5][1].b\n        //set token to localStorage \n        await localStorage.setItem('token', token)\n        setToken(token)\n        //grab token from local storage and set to state. \n          console.log(res)\n        })\n        .catch(err => {\n        setErrors(prev => ([...prev, err.message]))\n      })\n    },\n  signin: (email, password, setErrors, setToken) => {\n    //change from create users to...\n    firebase.auth().signInWithEmailAndPassword(email, password) \n      //everything is almost exactly the same as the function above\n      .then( async res => {\n        const token = await Object.entries(res.user)[5][1].b\n          //set token to localStorage \n          await localStorage.setItem('token', token)\n          \n          \n          setToken(window.localStorage.token)\n        })\n        .catch(err => {\n          setErrors(prev => ([...prev, err.message]))\n        })\n      },\n      //no need for email and password\n      signout: (setErrors, setToken) => {\n      // signOut is a no argument function\n    firebase.auth().signOut().then( res => {\n      //remove the token\n      localStorage.removeItem('token')\n        //set the token back to original state\n        setToken(null)\n    })\n    .catch(err => {\n      //there shouldn't every be an error from firebase but just in case\n      setErrors(prev => ([...prev, err.message]))\n      //whether firebase does the trick or not i want my user to do there thing.\n        localStorage.removeItem('token')\n          setToken(null)\n            console.error(err.message)\n    })\n    },\n  }\n\n\n// import firebaseConfig from './firebaseIndex'\n// import firebase from 'firebase'\n\n\n// export const authMethods = {\n\n//                 // firebase helper methods go here... \n//                 signup: (email, password, setErrors, setToken) => {\n//                   firebase.auth().createUserWithEmailAndPassword(email,password) \n//                     //make res asynchronous so that we can make grab the token before saving it.\n//                     .then( async res => {\n//                       const token = await Object.entries(res.user)[5][1].b\n//                       console.log(token)\n//                         //set token to localStorage \n//                         await localStorage.setItem('token', token)\n//                         //grab token from local storage and set to state. \n//                         setToken(window.localStorage.token)\n//                       console.log(res)\n//                     })\n//                     .catch(err => {\n//                       setErrors(prev => ([...prev, err.message]))\n//                     })\n//                   },\n//                   signin: (email, password, setErrors, setToken) => {\n//                     //change from create users to...\n//                     firebase.auth().signInWithEmailAndPassword(email,password) \n//                       //everything is almost exactly the same as the function above\n//                       .then( async res => {\n//                         const token = await Object.entries(res.user)[5][1].b\n//                           //set token to localStorage \n//                           await localStorage.setItem('token', token)\n//                           setToken(window.localStorage.token)\n//                             console.log(res)\n//                       })\n//                       .catch(err => {\n//                         setErrors(prev => ([...prev, err.message]))\n//                       })\n//                     },\n//                     signout: (setErrors, setToken) => {\n//                       // signOut is a no argument function\n//                     firebase.auth().signOut().then( res => {\n//                       //remove the token\n//                       localStorage.removeItem('token')\n//                         //set the token back to original state\n//                         setToken(null)\n//                     })\n//                     .catch(err => {\n//                       //there shouldn't every be an error from firebase but just in case\n//                       setErrors(prev => ([...prev, err.message]))\n//                       //whether firebase does the trick or not i want my user to do there thing.\n//                         localStorage.removeItem('token')\n//                           setToken(null)\n//                             console.error(err.message)\n//                     })\n//                     },\n//     }"]},"metadata":{},"sourceType":"module"}