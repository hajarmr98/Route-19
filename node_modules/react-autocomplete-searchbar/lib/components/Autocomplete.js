function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { string, number, array, func } from 'prop-types';
import AutocompleteDropdown from './AutocompleteDropdown';
import '../style/react-autocomplete.css';

class Autocomplete extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      suggestions: []
    });

    _defineProperty(this, "handleSearch", e => {
      let matches = []; // Check to see if we have passed the minimum search string requirement

      if (e.target.value.length > this.props.minimumSearchLength) {
        // Loop over the search array using our searchKey and check for matches
        this.props.searchArray.forEach(item => {
          if (item[this.props.searchKey].toLowerCase().includes(e.target.value.toLowerCase())) {
            matches.push(item);
          }
        });
      }

      this.setState({
        suggestions: matches
      });
    });

    _defineProperty(this, "handleDropdownDisplay", () => {
      if (this.state.suggestions.length > 0) return React.createElement(AutocompleteDropdown, {
        handleClick: this.handleClick,
        suggestions: this.state.suggestions,
        searchKey: this.props.searchKey
      });
    });

    _defineProperty(this, "handleClick", selection => {
      this.refs.raInput.value = selection[this.props.searchKey];
      this.setState({
        suggestions: []
      });
      this.props.makeSearch(selection);
    });
  }

  render() {
    return React.createElement("div", {
      class: "ra-container"
    }, React.createElement("input", {
      class: "ra-input",
      type: "text",
      ref: "raInput",
      placeholder: this.props.placeholder,
      onChange: this.handleSearch
    }), this.handleDropdownDisplay());
  }

}

_defineProperty(Autocomplete, "propTypes", {
  placeholder: string,
  // How many characters the user must type before the component starts making suggestions.
  minimumSearchLength: number,
  // The name of the attribute which we expect the user to type into our searchbar.
  searchKey: string,
  searchArray: array,
  makeSearch: func
});

_defineProperty(Autocomplete, "defaultProps", {
  placeholder: 'Make a search...',
  minimumSearchLength: 1,
  searchKey: 'name',
  searchArray: [],
  makeSearch: () => console.log("This component bubbles up the user's selection through use of the makeSearch prop. Pass your own function as the makeSearch prop.")
});

export default Autocomplete;